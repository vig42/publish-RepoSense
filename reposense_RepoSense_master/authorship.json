[{"path":"docs/about.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cvariable name\u003d\"title\"\u003eAbout us\u003c/variable\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-3\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"RepoSense is a project based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg/), funded by a _Teaching Enhancement Grant_ from the [NUS Center for Development of Teaching and Learning](http://www.cdtl.nus.edu.sg/)."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c!-- \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d --\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Current team"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"### [Damith C. Rajapakse](http://www.comp.nus.edu.sg/~damithch)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"![](https://avatars.githubusercontent.com/u/1673303?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Role**: Project Advisor"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"### [Wang Chao](https://github.com/fzdy1914)"},{"lineNumber":21,"author":{"gitId":"-"},"content":"![](https://avatars3.githubusercontent.com/u/35621726?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":22,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Project Lead [2021 Jan - ]\u003cbr/\u003e"},{"lineNumber":23,"author":{"gitId":"jamessspanggg"},"content":"Maintainer [2020 May- 2021 Jan]\u003cbr/\u003e"},{"lineNumber":24,"author":{"gitId":"jamessspanggg"},"content":"Committer [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]\u003cbr/\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"jamessspanggg"},"content":"### [Peh Xian Bin, Eugene](https://github.com/eugenepeh)"},{"lineNumber":30,"author":{"gitId":"jamessspanggg"},"content":"![](https://avatars.githubusercontent.com/u/19277206?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":31,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Maintainer [2020 May - ]\u003cbr/\u003e"},{"lineNumber":32,"author":{"gitId":"jamessspanggg"},"content":"Project Lead [2018 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"jamessspanggg"},"content":"### [James Pang Mun Wai](https://github.com/jamessspanggg)"},{"lineNumber":36,"author":{"gitId":"jamessspanggg"},"content":"![](https://avatars1.githubusercontent.com/u/32864116?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":37,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Maintainer [2021 Jan - ]\u003cbr/\u003e"},{"lineNumber":38,"author":{"gitId":"jamessspanggg"},"content":"Committer [2020 May - 2021 Jan]\u003cbr/\u003e"},{"lineNumber":39,"author":{"gitId":"jamessspanggg"},"content":"Contributor [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"### [Liu Yiwen](https://github.com/0blivious)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 August - ]\u003cbr/\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"### [Tejas Bhuwania](https://github.com/Tejas2805)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"![](https://avatars2.githubusercontent.com/u/35946746?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 August - ]\u003cbr/\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"### [Anubhav](https://github.com/anubh-v)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 September - ]\u003cbr/\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"### [Ang Ze Yu](https://github.com/ang-zeyu)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"**Role**: Contributor [2020 January - ]\u003cbr/\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"jamessspanggg"},"content":"### [Chan Ger Hean](https://github.com/gerhean)"},{"lineNumber":65,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2021 January - ]\u003cbr/\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jamessspanggg"},"content":"### [Hsu Zhong Jun](https://github.com/dcshzj)"},{"lineNumber":70,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2021 January - ]\u003cbr/\u003e"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"jamessspanggg"},"content":"### [Huang Chengyu](https://github.com/HCY123902)"},{"lineNumber":75,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2021 January - ]\u003cbr/\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":78,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":79,"author":{"gitId":"jamessspanggg"},"content":"### [Roland Yu Wenyang](https://github.com/rolandyuwy)"},{"lineNumber":80,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2021 January - ]\u003cbr/\u003e"},{"lineNumber":81,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":82,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Past Members"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"### [Ma Tanghao](https://github.com/harryggg)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Main developer for the initial version [2017 May - 2018 May]"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"### [Ong Shu Peng](https://github.com/ongspxm)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"![](https://avatars0.githubusercontent.com/u/1430854?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"**Role**: Area Lead for UI [2018 Dec - 2019 May]\u003cbr/\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### [Tan Jun An](https://github.com/yamidark)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"![](https://avatars3.githubusercontent.com/u/18352498?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"**Role**: Area Lead for Code Quality [2018 Aug - 2019 April]\u003cbr/\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Committer [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"jamessspanggg"},"content":"### [Teng Yong Hao](https://github.com/yong24s)"},{"lineNumber":107,"author":{"gitId":"jamessspanggg"},"content":"![](https://avatars2.githubusercontent.com/u/2003406?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":108,"author":{"gitId":"jamessspanggg"},"content":"**Role**: "},{"lineNumber":109,"author":{"gitId":"jamessspanggg"},"content":"Mentor [2018 Dec - 2020 May]\u003cbr/\u003e"},{"lineNumber":110,"author":{"gitId":"jamessspanggg"},"content":"Committer [2018 Aug - 2018 Dec]\u003cbr/\u003e"},{"lineNumber":111,"author":{"gitId":"jamessspanggg"},"content":"Contributor [2018 May - 2018 Aug]\u003cbr/\u003e"},{"lineNumber":112,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":113,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":114,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"### [Aditya Agarwal](https://github.com/adityaa1998)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"Contributor [2018 May - 2018 Aug]"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"### [Apoorva Ullas](https://github.com/apoorva17)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"Contributor [2018 Aug - 2019 May]"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"### [Chelsey Ong Hee](https://github.com/chelseyong)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"### [Gilbert Emerson](https://github.com/emer7)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"### [Teo Ming Yi](https://github.com/myteo)"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Contributor [2018 Dec - 2019 May]"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"### [Jin Minjia](https://github.com/bluein-green)"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**Role**: Contributor [2019 May - 2019 Aug]\u003cbr/\u003e"},{"lineNumber":142,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":143,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":144,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":145,"author":{"gitId":"jamessspanggg"},"content":"### [Lee Jin Yao](https://github.com/jylee-git)"},{"lineNumber":146,"author":{"gitId":"jamessspanggg"},"content":"![](https://avatars3.githubusercontent.com/u/35756209?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":147,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2019 May - 2020 May]\u003cbr/\u003e"},{"lineNumber":148,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":149,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":150,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":151,"author":{"gitId":"jamessspanggg"},"content":"### [Chong Chee Yuan](https://github.com/ccyccyccy)"},{"lineNumber":152,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"},{"lineNumber":153,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":154,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":155,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":156,"author":{"gitId":"jamessspanggg"},"content":"### [Ni Tianzhen](https://github.com/niqiukun)"},{"lineNumber":157,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"},{"lineNumber":158,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":159,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":160,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":161,"author":{"gitId":"jamessspanggg"},"content":"### [Yash Chowdhary](https://github.com/yash-chowdhary)"},{"lineNumber":162,"author":{"gitId":"jamessspanggg"},"content":"![](https://avatars2.githubusercontent.com/u/21968718?s\u003d150\u0026v\u003d4)\u003cbr/\u003e"},{"lineNumber":163,"author":{"gitId":"jamessspanggg"},"content":"**Role**: Contributor [2020 January - 2020 May]\u003cbr/\u003e"}],"authorContributionMap":{"jamessspanggg":55,"-":108}},{"path":"docs/ug/cli.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003cvariable name\u003d\"title\"\u003eAppendix: CLI syntax reference\u003c/variable\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003cfrontmatter\u003e"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  title: \"{{ title | safe }}\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"  pageNav: 3"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c/frontmatter\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003ch1 class\u003d\"display-4\"\u003e\u003cmd\u003e{{ title }}\u003c/md\u003e\u003c/h1\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003cdiv class\u003d\"lead\"\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"The command `java -jar RepoSense.jar` takes several flags."},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cbox\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Examples**:"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"An example of a command using most parameters:\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar --repos https://github.com/reposense/RepoSense.git --output ./report_folder --since 31/1/2017 --until 31/12/2018 --formats java adoc xml --view --ignore-standalone-config --last-modified-date --timezone UTC+08`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"Same command as above but using most parameters in alias format:\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"`java -jar RepoSense.jar -r https://github.com/reposense/RepoSense.git -o ./report_folder -s 31/1/2017 -u 31/12/2018 -f java adoc xml -v -i -l -t UTC+08`"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"The section below provides explanations for each of the flags."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"### `--assets`, `-a`"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-config\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"**`--assets ASSETS_DIRECTORY`**: Specifies where to place assets for report generation."},{"lineNumber":34,"author":{"gitId":"-"},"content":"* Parameter: `ASSETS_DIRECTORY` The directory containing the assets files. A `favicon.ico` file can be placed here to customize the favicon of the dashboard."},{"lineNumber":35,"author":{"gitId":"-"},"content":"* Alias: `-a`"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Example: `--assets ./assets` or `-a ./assets`"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* If `--assets` is not specified, RepoSense looks for assets in the `./assets` directory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c!-- --------------------------◘---------------------------------------------------------------------------- --\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"### `--config`, `-c`"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"\u003cdiv id\u003d\"section-config\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"**`--config CONFIG_DIRECTORY`**: Specifies that config files located in `CONFIG_DIRECTORY` should be used to customize the report."},{"lineNumber":51,"author":{"gitId":"-"},"content":"* Parameter: `CONFIG_DIRECTORY` The directory containing the config files. Should contain a `repo-config.csv` file. Optionally, can contain an `author-config.csv` file or/and a `group-config.csv` file or/and a `report-config.json` file."},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Alias: `-c`"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Example: `java -jar RepoSense.jar --config  ./config`"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Cannot be used with `--repos`."},{"lineNumber":58,"author":{"gitId":"-"},"content":"* If both `--repos` and `--config` are not specified, RepoSense looks for config files in the `./config` directory."},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"### `--formats`, `-f`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"**`--formats LIST_OF_FORMATS`**: Specifies which file extensions to be included in the analysis."},{"lineNumber":67,"author":{"gitId":"-"},"content":"* Parameter: `LIST_OF_FORMATS` A space-separated list of file extensions that should be included in the analysis.\u003cbr\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  Default: all file formats"},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Alias: `-f`"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* Example:`--formats css fxml gradle` or `-f css fxml gradle`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Binary file formats, such as `jpg`, `png`,`exe`,`zip`, `rar`, `docx`, and `pptx`, all will be labelled as the file type `binary` in the generated report."},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"### `--help`, `-h`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**`--help`**: Shows the help message."},{"lineNumber":81,"author":{"gitId":"-"},"content":"* Alias: `-h`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Cannot be used with any other flags."},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"### `--ignore-standalone-config`, `-i`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"**`--ignore-standalone-config`**: Specifies that the standalone config file in the repo should be ignored."},{"lineNumber":92,"author":{"gitId":"-"},"content":"* Default: the standalone config file is not ignored"},{"lineNumber":93,"author":{"gitId":"-"},"content":"* Alias: `-i`"},{"lineNumber":94,"author":{"gitId":"-"},"content":"* Example:`--ignore-standalone-config` or `-i`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"This flag overrides the `Ignore standalone config` field in the CSV config file."},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"jamessspanggg"},"content":"### `--last-modified-date`, `-l`"},{"lineNumber":104,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"**`--last-modified-date`**: Specifies that the last modified date of each line of code should be added to `authorship.json`."},{"lineNumber":106,"author":{"gitId":"jamessspanggg"},"content":"* Default: the last modified date of each line of code will not be added to `authorship.json`"},{"lineNumber":107,"author":{"gitId":"jamessspanggg"},"content":"* Alias: `-l` (lowercase L)"},{"lineNumber":108,"author":{"gitId":"jamessspanggg"},"content":"* Example:`--last-modified-date` or `-l`"},{"lineNumber":109,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"* Cannot be used with `--shallow-cloning`."},{"lineNumber":113,"author":{"gitId":"-"},"content":"* The last modified dates will be in the same timezone specified with the `--timezone` flag."},{"lineNumber":114,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":115,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":116,"author":{"gitId":"jamessspanggg"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":117,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"### `--output`, `-o`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**`--output OUTPUT_DIRECTORY`**: Indicates where to save the report generated."},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Parameter: `OUTPUT_DIRECTORY` The location for the generated `reposense-report` folder.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  Default: current directory"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Alias: `-o`"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Example: `--output ./foo` or `-o ./foo` (the report will be in the `./foo/reposense-report` folder)"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"### `--period`, `-p`"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"**`--period PERIOD`**: Specifies the period of analysis window."},{"lineNumber":131,"author":{"gitId":"-"},"content":"* Parameter: `PERIOD` The period of analysis window, in the format `nd` (for n days) or `nw` (for n weeks). It is used to calculate end date if only start date is specified, or calculate end date if only start date is specified."},{"lineNumber":132,"author":{"gitId":"-"},"content":"* Alias: `-p`"},{"lineNumber":133,"author":{"gitId":"-"},"content":"* Example: `--period 30d` or `--period 4w`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"* If both start date and end date are not specified, the date of generating the report will be taken as the end date."},{"lineNumber":138,"author":{"gitId":"-"},"content":"* Cannot be used with both `--since` and `--until`."},{"lineNumber":139,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"### `--repos`, `-r`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"**`--repos REPO_LOCATION`**: Specifies which repositories to analyze."},{"lineNumber":145,"author":{"gitId":"-"},"content":"* Parameter: `REPO_LOCATION` A list of URLs or the disk location of the git repositories to analyze, separated by spaces."},{"lineNumber":146,"author":{"gitId":"-"},"content":"* Alias: `-r`"},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Examples:"},{"lineNumber":148,"author":{"gitId":"-"},"content":"  * `--repos https://github.com/reposense/RepoSense.git`"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  * `--repos https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar`: analyzes the two specified repos (one remote, one local) and generates one report containing details of both."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"Cannot be used with `--config`."},{"lineNumber":154,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"### `--shallow-cloning`, `-S`"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"**`--shallow-cloning`**: Clones repositories using Git\u0027s shallow cloning functionality, which can significantly reduce the time taken to clone large repositories. However, the flag should not be used for smaller repositories where the `.git` file is smaller than 500 MB, as it would create overhead."},{"lineNumber":160,"author":{"gitId":"-"},"content":"* Default: RepoSense does not clone repositories using Git\u0027s shallow cloning functionality."},{"lineNumber":161,"author":{"gitId":"-"},"content":"* Alias: `-S` (uppercase S)"},{"lineNumber":162,"author":{"gitId":"-"},"content":"* Example:`--shallow-cloning` or `-S`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Cannot be used with `--last-modified-date`."},{"lineNumber":167,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"### `--since`, `-s`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"**`--since START_DATE`**: Specifies the start date for the period to be analyzed."},{"lineNumber":174,"author":{"gitId":"-"},"content":"* Parameter: `START_DATE` The first day of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  Default: one month before the current date"},{"lineNumber":176,"author":{"gitId":"-"},"content":"* Alias: `-s`"},{"lineNumber":177,"author":{"gitId":"-"},"content":"* Example:`--since 21/10/2017` or `-s 21/10/2017`"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"* If the start date is not specified, only commits made one month before the end date (if specified) or the date of generating the report, will be captured and analyzed."},{"lineNumber":182,"author":{"gitId":"-"},"content":"* If `d1` is specified as the start date (`--since d1` or `-s d1`), then the earliest commit date of all repositories will be taken as the since date."},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":184,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"### `--timezone`, `-t`"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"**`--timezone ZONE_ID`**: Indicates the timezone to be used for the analysis."},{"lineNumber":189,"author":{"gitId":"-"},"content":"* Parameter: `ZONE_ID` The timezone in the format `ZONE_ID[±hh[mm]]`.\u003cbr\u003e"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  Default: system\u0027s default timezone"},{"lineNumber":191,"author":{"gitId":"-"},"content":"* Alias: `-t`"},{"lineNumber":192,"author":{"gitId":"-"},"content":"* Example:`--timezone UTC+08` or `-t UTC-1030`"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"### `--until`, `-u`"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"**`--until END_DATE`**: Specifies the end date of the analysis period."},{"lineNumber":199,"author":{"gitId":"-"},"content":"* Parameter: `END_DATE` The last date of the period to be analyzed, in the format `DD/MM/YYYY`.\u003cbr\u003e"},{"lineNumber":200,"author":{"gitId":"-"},"content":"  Default: current date"},{"lineNumber":201,"author":{"gitId":"-"},"content":"* Alias: `-u`"},{"lineNumber":202,"author":{"gitId":"-"},"content":"* Example:`--until 21/10/2017` or `-u 21/10/2017`"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"Note: If the end date is not specified, the date of generating the report will be taken as the end date."},{"lineNumber":207,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"### `--version`, `-V`"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"**`--version`**: Shows the version of RepoSense."},{"lineNumber":214,"author":{"gitId":"-"},"content":"* Alias: `-V` (upper case)"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"\u003cbox type\u003d\"info\" seamless\u003e"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"Cannot be used with any other flags."},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c/box\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003c!-- ------------------------------------------------------------------------------------------------------ --\u003e"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"### `--view`, `-v`"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"**`--view [REPORT_FOLDER]`**: Specifies that the report should be opened in the default browser."},{"lineNumber":225,"author":{"gitId":"-"},"content":"* Parameter: `REPORT_FOLDER` Optional. If specified, no analysis will be performed and the report specified by the argument will be opened.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitId":"-"},"content":"  Default: `./reposense-report`"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* Alias: `-v`"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* Example:`--view` or `-v`"}],"authorContributionMap":{"jamessspanggg":9,"-":219}},{"path":"frontend/src/index.pug","fileType":"pug","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE html\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":"html"},{"lineNumber":3,"author":{"gitId":"-"},"content":"  head"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    title RepoSense Report"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    link(rel\u003d\"shortcut icon\", type\u003d\"image/x-icon\", href\u003d\"favicon.ico\")"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"https://fonts.googleapis.com/css?family\u003dTitillium+Web\")"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/normalize.css@8.0/normalize.min.css\")"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/muicss@0.9/dist/css/mui.min.css\")"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/highlight.js@9.14/styles/color-brewer.min.css\")"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"https://cdn.jsdelivr.net/npm/vue-loading-overlay@3/dist/vue-loading.css\")"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/panels.css\")"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/style.css\")"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_authorship.css\")"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_ramp.css\")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_summary.css\")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    link(rel\u003d\"stylesheet\", href\u003d\"static/css/v_zoom.css\")"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // indirect dependencies"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\", defer\u003dTrue)"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/minimatch@1.0.0/minimatch.min.js\")"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/@fortawesome/vue-fontawesome@0.1.9/index.min.js\")"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/jszip@3.1/dist/jszip.min.js\")"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/seedrandom@3.0.5/seedrandom.min.js\")"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/vue-loading-overlay@3\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/npm/vue@2.5/dist/vue.js\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://unpkg.com/vuex@3.1.3/dist/vuex.js\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/highlight.min.js\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/asciidoc.min.js\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/gradle.min.js\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/plaintext.min.js\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/scss.min.js\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    script(src\u003d\"https://cdn.jsdelivr.net/gh/highlightjs/cdn-release@9.14/build/languages/yaml.min.js\")"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  body"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    #app"},{"lineNumber":38,"author":{"gitId":"-"},"content":"      loading-overlay.overlay-loader("},{"lineNumber":39,"author":{"gitId":"-"},"content":"        v-cloak,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        v-bind:active.sync\u003d\"isLoadingOverlayEnabled\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"        v-bind:opacity\u003d\u0027loadingOverlayOpacity\u0027,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        v-bind:is-full-page\u003d\"true\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"      )"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        i.overlay-loading-icon.fa.fa-spinner.fa-spin(slot\u003d\u0027default\u0027)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        h3(slot\u003d\u0027after\u0027) {{ loadingOverlayMessage }}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"jamessspanggg"},"content":"      template(v-if\u003d\"userUpdated\")"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        v-resizer("},{"lineNumber":49,"author":{"gitId":"-"},"content":"          v-bind:is-tab-active\u003d\"isTabActive\","},{"lineNumber":50,"author":{"gitId":"-"},"content":"          v-on:close-tab\u003d\"deactivateTab\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        )"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          #summary-wrapper(slot\u003d\"left\")"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            v-summary.tab-padding("},{"lineNumber":54,"author":{"gitId":"-"},"content":"              ref\u003d\"summary\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"              v-bind:repos\u003d\"users\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"              v-bind:error-messages\u003d\"errorMessages\","},{"lineNumber":57,"author":{"gitId":"-"},"content":"              v-on:get-dates\u003d\"receiveDates\""},{"lineNumber":58,"author":{"gitId":"-"},"content":"            )"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .timestamp-footer"},{"lineNumber":60,"author":{"gitId":"-"},"content":"              span Generated by\u0026nbsp;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"              a("},{"lineNumber":62,"author":{"gitId":"-"},"content":"                v-bind:href\u003d\"getSpecificCommitLink()\", target\u003d\"_blank\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"              )"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                strong this version"},{"lineNumber":65,"author":{"gitId":"-"},"content":"              span \u0026nbsp;of\u0026nbsp;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"              a("},{"lineNumber":67,"author":{"gitId":"-"},"content":"                v-bind:href\u003d\"getRepoSenseHomeLink()\", target\u003d\"_blank\""},{"lineNumber":68,"author":{"gitId":"-"},"content":"              )"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                strong RepoSense"},{"lineNumber":70,"author":{"gitId":"-"},"content":"              span \u0026nbsp;("},{"lineNumber":71,"author":{"gitId":"-"},"content":"              a("},{"lineNumber":72,"author":{"gitId":"-"},"content":"                v-bind:href\u003d\"getUserGuideLink()\", target \u003d\"_blank\""},{"lineNumber":73,"author":{"gitId":"-"},"content":"              )"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                strong User Guide"},{"lineNumber":75,"author":{"gitId":"-"},"content":"              span ) on {{ creationDate }}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            .report-generation-time(style\u003d\"display: none;\")"},{"lineNumber":77,"author":{"gitId":"-"},"content":"              span {{ reportGenerationTime }}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"          #tabs-wrapper(ref\u003d\"tabWrapper\", slot\u003d\"right\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            .tab-content.panel-padding"},{"lineNumber":81,"author":{"gitId":"-"},"content":"              .tab-pane"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                v-authorship#tab-authorship(v-if\u003d\"tabType \u003d\u003d\u003d \u0027authorship\u0027\")"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                v-zoom#tab-zoom(v-else-if\u003d\"tabType \u003d\u003d\u003d \u0027zoom\u0027\")"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                #tab-empty(v-else)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                  .title"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    h2 Welcome to this RepoSense report!"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    p The charts on the left show the contribution activities, grouped by repository and author."},{"lineNumber":88,"author":{"gitId":"-"},"content":"                    p"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                      | To view the code attributed to a specific author, click the \u0026nbsp;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                      font-awesome-icon(icon\u003d\"code\")"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                      | \u0026nbsp; icon next to that author\u0027s name."},{"lineNumber":92,"author":{"gitId":"-"},"content":"                      br"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                      | To view the breakdown of commits made by a specific author, click the \u0026nbsp;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                      font-awesome-icon(icon\u003d\"list-ul\")"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                      | \u0026nbsp; icon next to that author\u0027s name."},{"lineNumber":96,"author":{"gitId":"-"},"content":"                      br"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                      | To hide the code view and show only the activity charts, click the \u0026nbsp;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                      font-awesome-icon(icon\u003d\"caret-right\")"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                      | \u0026nbsp; icon on the centre divider."},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    p"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                      | See the \u0026nbsp;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                      a("},{"lineNumber":103,"author":{"gitId":"-"},"content":"                        v-bind:href\u003d\"getUsingReportsUserGuideLink()\", target\u003d\"_blank\""},{"lineNumber":104,"author":{"gitId":"-"},"content":"                      )"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                        strong User Guide"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                      | \u0026nbsp; to get a better understanding of how to interpret the report."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"      template(v-else)"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        .empty Please upload a .zip file generated by RepoSense."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        form#file-upload(onsubmit\u003d\"return false;\")"},{"lineNumber":112,"author":{"gitId":"-"},"content":"          input(type\u003d\"file\", accept\u003d\".zip\", v-on:change\u003d\"updateReportZip\")"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    vuetemplate#v_resizer"},{"lineNumber":115,"author":{"gitId":"-"},"content":"      include resizer.pug"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    vuetemplate#v_summary"},{"lineNumber":118,"author":{"gitId":"-"},"content":"      include summary.pug"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    vuetemplate#v_summary_charts"},{"lineNumber":121,"author":{"gitId":"-"},"content":"      include summary_charts.pug"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    vuetemplate#v_ramp"},{"lineNumber":124,"author":{"gitId":"-"},"content":"      include ramp.pug"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    vuetemplate#v_zoom"},{"lineNumber":127,"author":{"gitId":"-"},"content":"      include tabs/zoom.pug"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    vuetemplate#v_segment"},{"lineNumber":130,"author":{"gitId":"-"},"content":"      include tabs/segment.pug"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    vuetemplate#v_authorship"},{"lineNumber":133,"author":{"gitId":"-"},"content":"      include tabs/authorship.pug"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/api.js\")"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    script(type\u003d\"module\", src\u003d\"static/js/store.js\")"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/safari_date.js\")"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_resizer.js\")"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_ramp.js\")"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_zoom.js\")"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_summary_charts.js\")"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_segment.js\")"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_summary.js\")"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/v_authorship.js\")"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/utils/ramp_colour_generator.js\")"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    script(src\u003d\"static/js/utils/repo_sorter.js\")"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    script(type\u003d\"module\", src\u003d\"static/js/main.js\")"}],"authorContributionMap":{"jamessspanggg":1,"-":146}},{"path":"src/main/java/reposense/RepoSense.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidCsvException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.parser.InvalidLocationException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.parser.ParseException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.system.ReportServer;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * The main RepoSense class."},{"lineNumber":41,"author":{"gitId":"-"},"content":" */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"public class RepoSense {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final int SERVER_PORT_NUMBER \u003d 9000;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss yyyy z\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String VERSION_UNSPECIFIED \u003d \"unspecified\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the report config provided.\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * The entry point of the program."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            TimeUtil.startTimer();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            CliArguments cliArguments \u003d ArgsParser.parse(args);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs \u003d null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"            if (cliArguments instanceof ViewCliArguments) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, (("},{"lineNumber":61,"author":{"gitId":"-"},"content":"                        ViewCliArguments) cliArguments).getReportDirectoryPath().toAbsolutePath());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                return;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof ConfigCliArguments) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((ConfigCliArguments) cliArguments);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                reportConfig \u003d getReportConfigurations((ConfigCliArguments) cliArguments);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            } else if (cliArguments instanceof LocationsCliArguments) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                configs \u003d getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                throw new AssertionError(\"CliArguments\u0027s subclass type is unhandled.\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            RepoConfiguration.setZoneIdToRepoConfigs(configs, cliArguments.getZoneId().toString());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs,"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                    cliArguments.isStandaloneConfigIgnored());"},{"lineNumber":77,"author":{"gitId":"jamessspanggg"},"content":"            RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(configs,"},{"lineNumber":78,"author":{"gitId":"jamessspanggg"},"content":"                    cliArguments.isLastModifiedDateIncluded());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            RepoConfiguration.setIsShallowCloningPerformedToRepoConfigs(configs,"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    cliArguments.isShallowCloningPerformed());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            List\u003cPath\u003e reportFoldersAndFiles \u003d ReportGenerator.generateReposReport(configs,"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    cliArguments.getOutputFilePath().toAbsolutePath().toString(),"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                    cliArguments.getAssetsFilePath().toAbsolutePath().toString(), reportConfig,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                    formatter.format(ZonedDateTime.now(cliArguments.getZoneId())),"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                    cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                    cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(),"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                    TimeUtil::getElapsedTime, cliArguments.getZoneId());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            FileUtil.zipFoldersAndFiles(reportFoldersAndFiles, cliArguments.getOutputFilePath().toAbsolutePath(),"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    \".json\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"            logger.info(TimeUtil.getElapsedTimeMessage());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"            if (cliArguments.isAutomaticallyLaunching()) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                ReportServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        } catch (IOException | ParseException | InvalidCsvException e) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException e) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            // help message was printed by the ArgumentParser; it is safe to exit."},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code ConfigCliArguments}."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws IOException if user-supplied csv file does not exists or is not readable."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @throws InvalidCsvException if user-supplied repo-config csv is malformed."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(ConfigCliArguments cliArguments)"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throws IOException, InvalidCsvException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as author-config.csv is not found."},{"lineNumber":120,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            // for all IO and invalid csv exceptions, log the error and continue"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            groupConfigs \u003d new GroupConfigCsvParser(cliArguments.getGroupConfigFilePath()).parse();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            // FileNotFoundException thrown as groups-config.csv is not found."},{"lineNumber":131,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException | InvalidCsvException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            // for all other IO and invalid csv exceptions, log the error and continue"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            logger.log(Level.WARNING, e.getMessage(), e);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return repoConfigs;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code LocationsCliArguments}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @throws ParseException if all repo locations are invalid."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(LocationsCliArguments cliArguments)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        for (String locationString : cliArguments.getLocations()) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                configs.add(new RepoConfiguration(new RepoLocation(locationString)));"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            } catch (InvalidLocationException ile) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, ile.getMessage(), ile);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        if (configs.isEmpty()) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw new ParseException(\"All repository locations are invalid.\");"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return configs;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Constructs {@code ReportConfiguration} if {@code cliArguments} is a {@code ConfigCliArguments}."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public static ReportConfiguration getReportConfigurations(ConfigCliArguments cliArguments) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfiguration();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            reportConfig \u003d new ReportConfigJsonParser().parse(cliArguments.getReportConfigFilePath());"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        } catch (JsonSyntaxException jse) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            logger.warning(String.format(\"%s is malformed.\", cliArguments.getReportConfigFilePath()));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON, iae.getMessage()));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            // IOException thrown as report-config.json is not found."},{"lineNumber":176,"author":{"gitId":"-"},"content":"            // Ignore exception as the file is optional."},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        return reportConfig;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public static String getVersion() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        String version \u003d RepoSense.class.getPackage().getImplementationVersion();"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        if (version \u003d\u003d null || version.equals(VERSION_UNSPECIFIED)) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            version \u003d System.getProperty(\"version\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        return version;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":2,"-":188}},{"path":"src/main/java/reposense/authorship/FileInfoAnalyzer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitId":"jamessspanggg"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.authorship.analyzer.AnnotatorAnalyzer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.git.GitBlame;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitLog;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":25,"author":{"gitId":"jamessspanggg"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Analyzes the target and information given in the {@code FileInfo}."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class FileInfoAnalyzer {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoAnalyzer.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_NAME_OFFSET \u003d \"author \".length();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_EMAIL_OFFSET \u003d \"author-mail \".length();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIME_OFFSET \u003d \"author-time \".length();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final int AUTHOR_TIMEZONE_OFFSET \u003d \"author-tz \".length();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final int FULL_COMMIT_HASH_LENGTH \u003d 40;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_FILE_MISSING \u003d \"Unable to analyze the file located at \\\"%s\\\" \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"as the file is missing from your system. Skipping this file.\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT \u003d \"Repo %s was cloned using \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"shallow cloning. As such, the \\\"last modified date\\\" values may be incorrect.\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Analyzes the lines of the file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * {@code Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static FileResult analyzeTextFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (FileUtil.isEmptyFile(config.getRepoRoot(), relativePath)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"jamessspanggg"},"content":"        aggregateBlameAuthorModifiedAndDateInfo(config, fileInfo);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AnnotatorAnalyzer.aggregateAnnotationAuthorInfo(fileInfo, config.getAuthorDetailsToAuthorMap());"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!config.getAuthorList().isEmpty() \u0026\u0026 fileInfo.isAllAuthorsIgnored(config.getAuthorList())) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return generateTextFileResult(fileInfo);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Analyzes the binary file, given in the {@code fileInfo}, that has changed in the time period provided"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * by {@code config}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns null if the file is missing from the local system, or none of the"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code Author} specified in {@code config} contributed to the file in {@code fileInfo}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static FileResult analyzeBinaryFile(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String relativePath \u003d fileInfo.getPath();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (Files.notExists(Paths.get(config.getRepoRoot(), relativePath))) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MESSAGE_FILE_MISSING, relativePath));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        fileInfo.setFileType(config.getFileType(fileInfo.getPath()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return generateBinaryFileResult(config, fileInfo);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Generates and returns a {@code FileResult} with the authorship results from {@code fileInfo} consolidated."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static FileResult generateTextFileResult(FileInfo fileInfo) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        for (LineInfo line : fileInfo.getLines()) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            Author author \u003d line.getAuthor();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, authorContributionMap.getOrDefault(author, 0) + 1);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return FileResult.createTextFileResult("},{"lineNumber":104,"author":{"gitId":"-"},"content":"            fileInfo.getPath(), fileInfo.getFileType(), fileInfo.getLines(), authorContributionMap);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Generates and returns a {@code FileResult} with the authorship results from binary {@code fileInfo} consolidated."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Authorship results are indicated in the {@code authorContributionMap} as contributions with zero line counts."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Returns {@code null} if none of the {@code Author} specified in {@code config} contributed to the file in"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * {@code fileInfo}."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    private static FileResult generateBinaryFileResult(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String authorsString \u003d GitLog.getBinaryFileAuthors(config, fileInfo.getPath());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (authorsString.isEmpty()) { // Empty string, means no author at all"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Set\u003cAuthor\u003e authors \u003d new HashSet\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        for (String authorString : authorsString.split(\"\\n\")) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            String[] arr \u003d authorString.split(\"\\t\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            String authorName \u003d arr[0];"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            String authorEmail \u003d arr[1];"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            authors.add(config.getAuthor(authorName, authorEmail));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        for (Author author : authors) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            authorContributionMap.put(author, 0);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return FileResult.createBinaryFileResult(fileInfo.getPath(), fileInfo.getFileType(), authorContributionMap);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"jamessspanggg"},"content":"     * Sets the {@code Author} and {@code Date} for each line in {@code fileInfo} based on the git blame analysis"},{"lineNumber":138,"author":{"gitId":"jamessspanggg"},"content":"     * on the file."},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jamessspanggg"},"content":"    private static void aggregateBlameAuthorModifiedAndDateInfo(RepoConfiguration config, FileInfo fileInfo) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String blameResults \u003d getGitBlameResult(config, fileInfo.getPath());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        String[] blameResultLines \u003d blameResults.split(\"\\n\");"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Path filePath \u003d Paths.get(fileInfo.getPath());"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Long sinceDateInMs \u003d config.getSinceDate().getTime();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Long untilDateInMs \u003d config.getUntilDate().getTime();"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        for (int lineCount \u003d 0; lineCount \u003c blameResultLines.length; lineCount +\u003d 5) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String commitHash \u003d blameResultLines[lineCount].substring(0, FULL_COMMIT_HASH_LENGTH);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            String authorName \u003d blameResultLines[lineCount + 1].substring(AUTHOR_NAME_OFFSET);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String authorEmail \u003d blameResultLines[lineCount + 2]"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                    .substring(AUTHOR_EMAIL_OFFSET).replaceAll(\"\u003c|\u003e\", \"\");"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            Long commitDateInMs \u003d Long.parseLong(blameResultLines[lineCount + 3].substring(AUTHOR_TIME_OFFSET)) * 1000;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            String authorTimeZone \u003d blameResultLines[lineCount + 4].substring(AUTHOR_TIMEZONE_OFFSET);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            Author author \u003d config.getAuthor(authorName, authorEmail);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"            if (!fileInfo.isFileLineTracked(lineCount / 5) || author.isIgnoringFile(filePath)"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                    || CommitHash.isInsideCommitList(commitHash, config.getIgnoreCommitList())"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                    || commitDateInMs \u003c sinceDateInMs || commitDateInMs \u003e untilDateInMs) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                author \u003d Author.UNKNOWN_AUTHOR;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"jamessspanggg"},"content":"            if (config.isLastModifiedDateIncluded()) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                if (config.isShallowCloningPerformed()) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":165,"author":{"gitId":"-"},"content":"                            MESSAGE_SHALLOW_CLONING_LAST_MODIFIED_DATE_CONFLICT, config.getRepoName()));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":167,"author":{"gitId":"jamessspanggg"},"content":"                // convert the commit date from the system default time zone to cli-specified timezone"},{"lineNumber":168,"author":{"gitId":"jamessspanggg"},"content":"                Date convertedCommitDate \u003d TimeUtil.getZonedDateFromSystemDate(new Date(commitDateInMs),"},{"lineNumber":169,"author":{"gitId":"jamessspanggg"},"content":"                        ZoneId.of(config.getZoneId()));"},{"lineNumber":170,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":171,"author":{"gitId":"jamessspanggg"},"content":"                fileInfo.setLineLastModifiedDate(lineCount / 5, convertedCommitDate);"},{"lineNumber":172,"author":{"gitId":"jamessspanggg"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            fileInfo.setLineAuthor(lineCount / 5, author);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Returns the analysis result from running git blame on {@code filePath}."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private static String getGitBlameResult(RepoConfiguration config, String filePath) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return GitBlame.blame(config.getRepoRoot(), filePath);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":13,"-":170}},{"path":"src/main/java/reposense/authorship/FileInfoExtractor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.git.GitDiff;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.git.GitRevList;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.git.exception.CommitNotFoundException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Extracts out all the relevant {@code FileInfo} from the repository."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class FileInfoExtractor {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(FileInfoExtractor.class);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_EXTRACTING_FILE_INFO \u003d \"Extracting relevant file info from %s (%s)...\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"jamessspanggg"},"content":"    private static final String DIFF_FILE_CHUNK_SEPARATOR \u003d \"\\ndiff --git \\\"?\\\u0027?a/.*\\n\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String LINE_CHUNKS_SEPARATOR \u003d \"\\n@@ \";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String LINE_INSERTED_SYMBOL \u003d \"+\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String STARTING_LINE_NUMBER_GROUP_NAME \u003d \"startingLineNumber\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String FILE_CHANGED_GROUP_NAME \u003d \"filePath\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String FILE_DELETED_SYMBOL \u003d \"/dev/null\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String MATCH_GROUP_FAIL_MESSAGE_FORMAT \u003d \"Failed to match the %s group for:\\n%s\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final String BINARY_FILE_LINE_DIFF_RESULT \u003d \"-\\t-\\t\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final int LINE_CHANGED_HEADER_INDEX \u003d 0;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static final Pattern STARTING_LINE_NUMBER_PATTERN \u003d Pattern.compile("},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \"-(\\\\d)+(,)?(\\\\d)* \\\\+(?\u003cstartingLineNumber\u003e\\\\d+)(,)?(\\\\d)* @@\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private static final Pattern FILE_CHANGED_PATTERN \u003d Pattern.compile(\"\\n(\\\\+){3} b?/(?\u003cfilePath\u003e.*)\\n\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant non-binary files given in {@code config}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e extractTextFileInfos(RepoConfiguration config) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_START_EXTRACTING_FILE_INFO, config.getLocation(), config.getBranch()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // checks out to the latest commit of the date range to ensure the FileInfo generated correspond to the"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // git blame file analyze output"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), config.getUntilDate());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        } catch (CommitNotFoundException cnfe) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String lastCommitHash \u003d GitRevList.getCommitHashBeforeDate("},{"lineNumber":67,"author":{"gitId":"-"},"content":"                config.getRepoRoot(), config.getBranch(), config.getSinceDate());"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!lastCommitHash.isEmpty()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            fileInfos \u003d getEditedFileInfos(config, lastCommitHash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fileInfos \u003d getAllFileInfo(config, false);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Extracts a list of relevant binary files given in {@code config}."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e extractBinaryFileInfos(RepoConfiguration config) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d getAllFileInfo(config, true);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        binaryFileInfos.sort(Comparator.comparing(FileInfo::getPath));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return binaryFileInfos;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Generates a list of relevant {@code FileInfo} for all files that were edited in between the current"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * commit and the {@code lastCommitHash} commit, marks each {@code LineInfo} for each {@code FileInfo} on"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * whether they have been inserted within the commit range or not, and returns it."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static List\u003cFileInfo\u003e getEditedFileInfos(RepoConfiguration config, String lastCommitHash) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String fullDiffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), lastCommitHash);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // no diff between the 2 commits, return an empty list"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (fullDiffResult.isEmpty()) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return fileInfos;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String[] fileDiffResultList \u003d fullDiffResult.split(DIFF_FILE_CHUNK_SEPARATOR);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e textFilesSet \u003d getFiles(config, false);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        for (String fileDiffResult : fileDiffResultList) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Matcher filePathMatcher \u003d FILE_CHANGED_PATTERN.matcher(fileDiffResult);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"            // diff result does not have the markers to indicate that file has any line changes, skip it"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            if (!filePathMatcher.find()) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"            String filePath \u003d filePathMatcher.group(FILE_CHANGED_GROUP_NAME);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"            // file is deleted, skip it as well"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            if (filePath.equals(FILE_DELETED_SYMBOL)) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"            if (!isValidTextFile(filePath, textFilesSet)) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"            if (config.getFileTypeManager().isInsideWhitelistedFormats(filePath)) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                FileInfo currentFileInfo \u003d generateFileInfo(config.getRepoRoot(), filePath);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                setLinesToTrack(currentFileInfo, fileDiffResult);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                fileInfos.add(currentFileInfo);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns a {@code Set} of non-binary files for the repo {@code repoConfig}"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * if {@code isBinaryFiles} is set to `false`."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Otherwise, returns a {@code Set} of binary files for the repo {@code repoConfig}"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static Set\u003cPath\u003e getFiles(RepoConfiguration repoConfig, boolean isBinaryFile) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        List\u003cString\u003e modifiedFileList \u003d GitDiff.getModifiedFilesList(Paths.get(repoConfig.getRepoRoot()));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // Gets rid of files with invalid directory name and filters by the {@code isBinaryFile} flag"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return modifiedFileList.stream()"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .filter(file -\u003e isBinaryFile \u003d\u003d file.startsWith(BINARY_FILE_LINE_DIFF_RESULT))"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                .map(file -\u003e file.split(\"\\t\")[2])"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                .filter(FileUtil::isValidPath)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .map(filteredFile -\u003e Paths.get(filteredFile))"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .collect(Collectors.toCollection(HashSet::new));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * Analyzes the {@code fileDiffResult} and marks each {@code LineInfo} in {@code FileInfo} on whether they were"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * inserted in between the commit range."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static void setLinesToTrack(FileInfo fileInfo, String fileDiffResult) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String[] linesChangedChunk \u003d fileDiffResult.split(LINE_CHUNKS_SEPARATOR);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cLineInfo\u003e lineInfos \u003d fileInfo.getLines();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        int fileLinePointer \u003d 0;"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // skips the header, index starts from 1"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        for (int sectionIndex \u003d 1; sectionIndex \u003c linesChangedChunk.length; sectionIndex++) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            String linesChangedInSection \u003d linesChangedChunk[sectionIndex];"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            String[] linesChanged \u003d linesChangedInSection.split(\"\\n\");"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            int startingLineNumber \u003d getStartingLineNumber(linesChanged[LINE_CHANGED_HEADER_INDEX]);"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"            // mark all untouched lines between sections as untracked"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            while (fileLinePointer \u003c startingLineNumber - 1) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"            // skips the header, index starts from 1"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            for (int lineIndex \u003d 1; lineIndex \u003c linesChanged.length; lineIndex++) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                String lineChanged \u003d linesChanged[lineIndex];"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                // set line added to be tracked"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                if (lineChanged.startsWith(LINE_INSERTED_SYMBOL)) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                    lineInfos.get(fileLinePointer++).setTracked(true);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        // set all remaining lines in file that were untouched to be untracked"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        while (fileLinePointer \u003c lineInfos.size()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            lineInfos.get(fileLinePointer++).setTracked(false);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Traverses each file from the repo root directory, generates the {@code FileInfo} for each relevant file found"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * based on {@code config} and inserts it into {@code fileInfos}."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    private static List\u003cFileInfo\u003e getAllFileInfo(RepoConfiguration config, boolean isBinaryFiles) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cPath\u003e files \u003d getFiles(config, isBinaryFiles);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        for (Path relativePath : files) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            if (!config.getFileTypeManager().isInsideWhitelistedFormats(relativePath.toString())) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            if (isBinaryFiles) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                // skip LineInfo analysis"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                fileInfos.add(new FileInfo(relativePath.toString()));"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                fileInfos.add(generateFileInfo(config.getRepoRoot(), relativePath.toString()));"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        return fileInfos;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     * Generates and returns a {@code FileInfo} with a list of {@code LineInfo} for each line content in the"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     * {@code relativePath} file."},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public static FileInfo generateFileInfo(String repoRoot, String relativePath) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d new FileInfo(relativePath);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(repoRoot, fileInfo.getPath());"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(path.toFile()))) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            String line;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            int lineNum \u003d 1;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                fileInfo.addLine(new LineInfo(lineNum++, line));"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        return fileInfo;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Returns the starting line changed number, within the file diff result, by matching the pattern inside"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * {@code linesChanged}."},{"lineNumber":230,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    private static int getStartingLineNumber(String linesChanged) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        Matcher chunkHeaderMatcher \u003d STARTING_LINE_NUMBER_PATTERN.matcher(linesChanged);"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        if (!chunkHeaderMatcher.find()) {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            logger.severe(String.format(MATCH_GROUP_FAIL_MESSAGE_FORMAT, \"line changed\", linesChanged));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Should not have error matching line number pattern inside chunk header!\");"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        return Integer.parseInt(chunkHeaderMatcher.group(STARTING_LINE_NUMBER_GROUP_NAME));"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"-"},"content":"     * Returns true if {@code filePath} is valid and the file is not in binary."},{"lineNumber":244,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    private static boolean isValidTextFile(String filePath, Set\u003cPath\u003e textFilesSet) {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        return FileUtil.isValidPath(filePath) \u0026\u0026 textFilesSet.contains(Paths.get(filePath));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":1,"-":247}},{"path":"src/main/java/reposense/authorship/model/FileInfo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jamessspanggg"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.util.SystemUtil;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Stores the path to the file and the list of {@code LineInfo} for each line in the file."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FileInfo {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final String path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final ArrayList\u003cLineInfo\u003e lines;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private FileType fileType;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public FileInfo(String path) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (SystemUtil.isWindows()) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            // Only replace \\ to / in Windows paths, so it does not interferes with a correct Unix path"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            path \u003d path.replace(\u0027\\\\\u0027, \u0027/\u0027);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.path \u003d path;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns true if none of the {@code Author} in {@code listedAuthors} contributed to this file."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public boolean isAllAuthorsIgnored(List\u003cAuthor\u003e listedAuthors) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return lines.stream().noneMatch(line -\u003e listedAuthors.contains(line.getAuthor()));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public LineInfo getLine(int num) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return lines.get(num - 1);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void addLine(LineInfo line) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        lines.add(line);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ArrayList\u003cLineInfo\u003e getLines() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return lines;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public String getPath() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public FileType getFileType() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return fileType;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setFileType(FileType fileType) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.fileType \u003d fileType;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the {@code Author} of the {@code LineInfo} in {@code lineNumber} for this {@code FileInfo}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setLineAuthor(int lineNumber, Author author) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        lines.get(lineNumber).setAuthor(author);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"jamessspanggg"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jamessspanggg"},"content":"     * Sets the {@code lastModifiedDate} of the {@code LineInfo} in {@code lineNumber} for this {@code FileInfo}."},{"lineNumber":70,"author":{"gitId":"jamessspanggg"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"jamessspanggg"},"content":"    public void setLineLastModifiedDate(int lineNumber, Date lastModifiedDate) {"},{"lineNumber":72,"author":{"gitId":"jamessspanggg"},"content":"        lines.get(lineNumber).setLastModifiedDate(lastModifiedDate);"},{"lineNumber":73,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if the {@code LineInfo} in {@code lineNumber} index is being tracked."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean isFileLineTracked(int lineNumber) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return getLines().get(lineNumber).isTracked();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof FileInfo)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        FileInfo otherFileInfo \u003d (FileInfo) other;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return path.equals(otherFileInfo.path)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 lines.equals(otherFileInfo.lines);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":8,"-":88}},{"path":"src/main/java/reposense/authorship/model/LineInfo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jamessspanggg"},"content":"import java.util.Date;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Stores the information of a line in a {@code FileInfo}."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class LineInfo {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int lineNumber;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Author author;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private String content;"},{"lineNumber":15,"author":{"gitId":"jamessspanggg"},"content":"    private Date lastModifiedDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private transient boolean isTracked;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public LineInfo(int lineNumber, String content) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.lineNumber \u003d lineNumber;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.content \u003d content;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        isTracked \u003d true;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Author getAuthor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void setAuthor(Author author) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.author \u003d author;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public int getLineNumber() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return lineNumber;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public String getContent() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return content;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setTracked(boolean isTracked) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.isTracked \u003d isTracked;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"jamessspanggg"},"content":"    public Date getLastModifiedDate() {"},{"lineNumber":47,"author":{"gitId":"jamessspanggg"},"content":"        return lastModifiedDate;"},{"lineNumber":48,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":50,"author":{"gitId":"jamessspanggg"},"content":"    public void setLastModifiedDate(Date lastModifiedDate) {"},{"lineNumber":51,"author":{"gitId":"jamessspanggg"},"content":"        this.lastModifiedDate \u003d lastModifiedDate;"},{"lineNumber":52,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean isTracked() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return isTracked;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof LineInfo)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        LineInfo otherLineInfo \u003d (LineInfo) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return lineNumber \u003d\u003d otherLineInfo.lineNumber"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(author, otherLineInfo.author)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 content.equals(otherLineInfo.content)"},{"lineNumber":72,"author":{"gitId":"jamessspanggg"},"content":"                \u0026\u0026 isTracked \u003d\u003d otherLineInfo.isTracked"},{"lineNumber":73,"author":{"gitId":"jamessspanggg"},"content":"                \u0026\u0026 ((lastModifiedDate \u003d\u003d null \u0026\u0026 otherLineInfo.lastModifiedDate \u003d\u003d null)"},{"lineNumber":74,"author":{"gitId":"jamessspanggg"},"content":"                    || (lastModifiedDate.equals(otherLineInfo.lastModifiedDate)));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"},{"lineNumber":77,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"jamessspanggg":13,"-":64}},{"path":"src/main/java/reposense/commits/CommitResultAggregator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.commits;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Calendar;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.commits.model.AuthorDailyContribution;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitResult;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":19,"author":{"gitId":"jamessspanggg"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Uses the commit analysis results to generate the summary information of a repository."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class CommitResultAggregator {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final int DAYS_IN_MS \u003d 24 * 60 * 60 * 1000;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the {@code CommitContributionSummary} generated from aggregating the {@code commitResults}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static CommitContributionSummary aggregateCommitResults("},{"lineNumber":32,"author":{"gitId":"-"},"content":"            RepoConfiguration config, List\u003cCommitResult\u003e commitResults) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Date startDate;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        startDate \u003d (config.getSinceDate().equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE))"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ? getStartOfDate(getStartDate(commitResults), config.getZoneId())"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                : config.getSinceDate();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ReportGenerator.setEarliestSinceDate(startDate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e authorDailyContributionsMap \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                getAuthorDailyContributionsMap(config.getAuthorDisplayNameMap().keySet(), commitResults,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                        config.getZoneId());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Date lastDate \u003d commitResults.size() \u003d\u003d 0"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                ? null"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                : getStartOfDate(commitResults.get(commitResults.size() - 1).getTime(), config.getZoneId());"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, Float\u003e authorContributionVariance \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                calcAuthorContributionVariance(authorDailyContributionsMap, startDate, lastDate, config.getZoneId());"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new CommitContributionSummary("},{"lineNumber":51,"author":{"gitId":"-"},"content":"                config.getAuthorDisplayNameMap(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                authorDailyContributionsMap,"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                authorContributionVariance);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Calculates the contribution variance of all authors."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static Map\u003cAuthor, Float\u003e calcAuthorContributionVariance("},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e intervalContributionMaps, Date startDate, Date lastDate,"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            String zoneId) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, Float\u003e result \u003d new HashMap\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        for (Author author : intervalContributionMaps.keySet()) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            List\u003cAuthorDailyContribution\u003e contributions \u003d intervalContributionMaps.get(author);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            result.put(author, getContributionVariance(contributions, startDate, lastDate, zoneId));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return result;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static float getContributionVariance(List\u003cAuthorDailyContribution\u003e contributions,"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            Date startDate, Date lastDate, String zoneId) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        if (contributions.size() \u003d\u003d 0) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        //get mean"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        float total \u003d 0;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        long totalDays \u003d (lastDate.getTime() - startDate.getTime()) / DAYS_IN_MS + 1;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        for (AuthorDailyContribution contribution : contributions) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            total +\u003d contribution.getTotalContribution();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        float mean \u003d total / totalDays;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        float variance \u003d 0;"},{"lineNumber":85,"author":{"gitId":"jamessspanggg"},"content":"        long currentDate \u003d TimeUtil.getZonedDateFromSystemDate(startDate, ZoneId.of(zoneId)).getTime();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        int contributionIndex \u003d 0;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c totalDays; i +\u003d 1) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            if (contributionIndex \u003c contributions.size()"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                    \u0026\u0026 currentDate \u003d\u003d contributions.get(contributionIndex).getDate().getTime()) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                variance +\u003d Math.pow((mean - contributions.get(contributionIndex).getTotalContribution()), 2);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                contributionIndex +\u003d 1;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                variance +\u003d Math.pow(mean, 2);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            currentDate +\u003d DAYS_IN_MS;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return variance / totalDays;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e getAuthorDailyContributionsMap("},{"lineNumber":101,"author":{"gitId":"-"},"content":"            Set\u003cAuthor\u003e authorSet, List\u003cCommitResult\u003e commitResults, String zoneId) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Map\u003cAuthor, List\u003cAuthorDailyContribution\u003e\u003e authorDailyContributionsMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        authorSet.forEach(author -\u003e authorDailyContributionsMap.put(author, new ArrayList\u003c\u003e()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Date commitStartDate \u003d null;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        for (CommitResult commitResult : commitResults) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            commitStartDate \u003d getSystemStartOfDate(commitResult.getTime(), zoneId);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Author commitAuthor \u003d commitResult.getAuthor();"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"            List\u003cAuthorDailyContribution\u003e authorDailyContributions \u003d authorDailyContributionsMap.get(commitAuthor);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"            if (authorDailyContributions.isEmpty()"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                    || !authorDailyContributions.get(authorDailyContributions.size() - 1).getDate()"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                            .equals(commitStartDate)) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                addDailyContributionForNewDate(authorDailyContributions, commitStartDate);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"            authorDailyContributions.get(authorDailyContributions.size() - 1).addCommitContribution(commitResult);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return authorDailyContributionsMap;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private static void addDailyContributionForNewDate("},{"lineNumber":125,"author":{"gitId":"-"},"content":"            List\u003cAuthorDailyContribution\u003e authorDailyContributions, Date date) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        authorDailyContributions.add(new AuthorDailyContribution(date));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Get the starting point of the {@code current} date with respect to the {@code zoneId} timezone."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private static Date getStartOfDate(Date current, String zoneId) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (current.equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE)) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return current;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"jamessspanggg"},"content":"        int zoneRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.of(zoneId));"},{"lineNumber":138,"author":{"gitId":"jamessspanggg"},"content":"        int systemRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Calendar cal \u003d new Calendar"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .Builder()"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .setInstant(current.getTime())"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, 0);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, 0);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, 0);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, systemRawOffset - zoneRawOffset);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Get the starting point of the {@code current} date that was given in {@code zoneId} timezone and convert into the"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * system\u0027s timezone."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private static Date getSystemStartOfDate(Date current, String zoneId) {"},{"lineNumber":157,"author":{"gitId":"jamessspanggg"},"content":"        int zoneRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.of(zoneId));"},{"lineNumber":158,"author":{"gitId":"jamessspanggg"},"content":"        int systemRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Calendar cal \u003d new Calendar"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                .Builder()"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                .setInstant(getStartOfDate(current, zoneId).getTime())"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, zoneRawOffset - systemRawOffset);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    private static Date getStartDate(List\u003cCommitResult\u003e commitInfos) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Date min \u003d new Date(Long.MIN_VALUE);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        if (!commitInfos.isEmpty()) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            min \u003d commitInfos.get(0).getTime();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return min;"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":6,"-":169}},{"path":"src/main/java/reposense/model/CliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public abstract class CliArguments {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    protected Path outputFilePath;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    protected Path assetsFilePath;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    protected Date sinceDate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    protected Date untilDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    protected boolean isSinceDateProvided;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    protected boolean isUntilDateProvided;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    protected List\u003cFileType\u003e formats;"},{"lineNumber":19,"author":{"gitId":"jamessspanggg"},"content":"    protected boolean isLastModifiedDateIncluded;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    protected boolean isShallowCloningPerformed;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    protected boolean isAutomaticallyLaunching;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    protected boolean isStandaloneConfigIgnored;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    protected ZoneId zoneId;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public ZoneId getZoneId() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Path getOutputFilePath() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return outputFilePath;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public Path getAssetsFilePath() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return assetsFilePath;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Date getSinceDate() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Date getUntilDate() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isSinceDateProvided() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return isSinceDateProvided;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isUntilDateProvided() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return isUntilDateProvided;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"jamessspanggg"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":54,"author":{"gitId":"jamessspanggg"},"content":"        return isLastModifiedDateIncluded;"},{"lineNumber":55,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return isShallowCloningPerformed;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getFormats() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return formats;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean isAutomaticallyLaunching() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return isAutomaticallyLaunching;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!(other instanceof CliArguments)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        CliArguments otherCliArguments \u003d (CliArguments) other;"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return this.outputFilePath.equals(otherCliArguments.outputFilePath)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.sinceDate.equals(otherCliArguments.sinceDate)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.untilDate.equals(otherCliArguments.untilDate)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isSinceDateProvided \u003d\u003d otherCliArguments.isSinceDateProvided"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isUntilDateProvided \u003d\u003d otherCliArguments.isUntilDateProvided"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.formats.equals(otherCliArguments.formats)"},{"lineNumber":93,"author":{"gitId":"jamessspanggg"},"content":"                \u0026\u0026 this.isLastModifiedDateIncluded \u003d\u003d otherCliArguments.isLastModifiedDateIncluded"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isShallowCloningPerformed \u003d\u003d otherCliArguments.isShallowCloningPerformed"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isAutomaticallyLaunching \u003d\u003d otherCliArguments.isAutomaticallyLaunching"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.isStandaloneConfigIgnored \u003d\u003d otherCliArguments.isStandaloneConfigIgnored"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.zoneId.equals(otherCliArguments.zoneId);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":6,"-":93}},{"path":"src/main/java/reposense/model/ConfigCliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program with mandatory field -config."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class ConfigCliArguments extends CliArguments {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Path configFolderPath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Path repoConfigFilePath;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Path authorConfigFilePath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Path groupConfigFilePath;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path reportConfigFilePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public ConfigCliArguments(Path configFolderPath, Path outputFilePath, Path assetsFilePath, Date sinceDate,"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Date untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided,"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            List\u003cFileType\u003e formats, boolean isLastModifiedDateIncluded, boolean isShallowCloningPerformed,"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            boolean isAutomaticallyLaunching, boolean isStandaloneConfigIgnored, ZoneId zoneId) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.configFolderPath \u003d configFolderPath.equals(EMPTY_PATH)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                ? configFolderPath.toAbsolutePath()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                : configFolderPath;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.repoConfigFilePath \u003d configFolderPath.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.authorConfigFilePath \u003d configFolderPath.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.groupConfigFilePath \u003d configFolderPath.resolve(GroupConfigCsvParser.GROUP_CONFIG_FILENAME);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.reportConfigFilePath \u003d configFolderPath.resolve(ReportConfigJsonParser.REPORT_CONFIG_FILENAME);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.outputFilePath \u003d outputFilePath;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.assetsFilePath \u003d assetsFilePath;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":44,"author":{"gitId":"jamessspanggg"},"content":"        this.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getConfigFolderPath() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return configFolderPath;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Path getRepoConfigFilePath() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return repoConfigFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Path getAuthorConfigFilePath() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return authorConfigFilePath;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Path getGroupConfigFilePath() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return groupConfigFilePath;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Path getReportConfigFilePath() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return reportConfigFilePath;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!(other instanceof ConfigCliArguments)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ConfigCliArguments otherConfigCliArguments \u003d (ConfigCliArguments) other;"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return super.equals(other)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.repoConfigFilePath.equals(otherConfigCliArguments.repoConfigFilePath)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.authorConfigFilePath.equals(otherConfigCliArguments.authorConfigFilePath)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.groupConfigFilePath.equals(otherConfigCliArguments.groupConfigFilePath)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.reportConfigFilePath.equals(otherConfigCliArguments.reportConfigFilePath);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":1,"-":90}},{"path":"src/main/java/reposense/model/LocationsCliArguments.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents command line arguments user supplied when running the program with mandatory field -repos."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class LocationsCliArguments extends CliArguments {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private List\u003cString\u003e locations;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public LocationsCliArguments(List\u003cString\u003e locations, Path outputFilePath, Path assetsFilePath, Date sinceDate,"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            Date untilDate, boolean isSinceDateProvided, boolean isUntilDateProvided, List\u003cFileType\u003e formats,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            boolean isLastModifiedDateIncluded, boolean isShallowCloningPerformed, boolean isAutomaticallyLaunching,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            boolean isStandaloneConfigIgnored, ZoneId zoneId) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        this.locations \u003d locations;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.outputFilePath \u003d outputFilePath;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.assetsFilePath \u003d assetsFilePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.isSinceDateProvided \u003d isSinceDateProvided;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.isUntilDateProvided \u003d isUntilDateProvided;"},{"lineNumber":25,"author":{"gitId":"jamessspanggg"},"content":"        this.isLastModifiedDateIncluded \u003d isLastModifiedDateIncluded;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.formats \u003d formats;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getLocations() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return locations;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (this \u003d\u003d other) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // instanceof handles null"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!(other instanceof LocationsCliArguments)) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        LocationsCliArguments otherLocationsCliArguments \u003d (LocationsCliArguments) other;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return super.equals(other)"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 this.locations.equals(otherLocationsCliArguments.locations);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":1,"-":53}},{"path":"src/main/java/reposense/model/RepoConfiguration.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import reposense.git.GitBranch;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents configuration information from CSV config file for a single repository."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class RepoConfiguration {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(RepoConfiguration.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private RepoLocation location;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private String branch;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String displayName;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String outputFolderName;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private transient String zoneId;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private transient Date sinceDate;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private transient Date untilDate;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private transient String repoFolderName;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private transient FileTypeManager fileTypeManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private transient List\u003cString\u003e ignoredAuthorsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private transient AuthorConfiguration authorConfig;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private transient boolean isStandaloneConfigIgnored;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private transient List\u003cCommitHash\u003e ignoreCommitList;"},{"lineNumber":39,"author":{"gitId":"jamessspanggg"},"content":"    private transient boolean isLastModifiedDateIncluded;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private transient boolean isShallowCloningPerformed;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private transient boolean isFormatsOverriding;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoreGlobListOverriding;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoreCommitListOverriding;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private transient boolean isIgnoredAuthorsListOverriding \u003d false;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this(location, DEFAULT_BRANCH);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location, String branch) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(location, branch, Collections.emptyList(), Collections.emptyList(), false, Collections.emptyList(),"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                false, false, false, false);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public RepoConfiguration(RepoLocation location, String branch, List\u003cFileType\u003e formats, List\u003cString\u003e ignoreGlobList,"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            boolean isStandaloneConfigIgnored, List\u003cCommitHash\u003e ignoreCommitList, boolean isFormatsOverriding,"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            boolean isIgnoreGlobListOverriding, boolean isIgnoreCommitListOverriding,"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            boolean isShallowCloningPerformed) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.authorConfig \u003d new AuthorConfiguration(location, branch);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.location \u003d location;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d ignoreGlobList;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.fileTypeManager \u003d new FileTypeManager(formats);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.isFormatsOverriding \u003d isFormatsOverriding;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.isIgnoreGlobListOverriding \u003d isIgnoreGlobListOverriding;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.isIgnoreCommitListOverriding \u003d isIgnoreCommitListOverriding;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String organization \u003d location.getOrganization();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String repoName \u003d location.getRepoName();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        displayName \u003d repoName + \"[\" + branch + \"]\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        outputFolderName \u003d repoName + \"_\" + branch;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        repoFolderName \u003d repoName;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (organization !\u003d null) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            repoFolderName \u003d organization + \"_\" + repoFolderName;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            displayName \u003d organization + \"/\" + displayName;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            outputFolderName \u003d organization + \"_\" + outputFolderName;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static void setDatesToRepoConfigs(List\u003cRepoConfiguration\u003e configs, Date sinceDate, Date untilDate) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            config.setSinceDate(sinceDate);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            config.setUntilDate(untilDate);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static void setZoneIdToRepoConfigs(List\u003cRepoConfiguration\u003e configs, String zoneId) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            config.setZoneId(zoneId);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"jamessspanggg"},"content":"    public static void setIsLastModifiedDateIncludedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":98,"author":{"gitId":"jamessspanggg"},"content":"                                                                  boolean isLastModifiedDateIncluded) {"},{"lineNumber":99,"author":{"gitId":"jamessspanggg"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":100,"author":{"gitId":"jamessspanggg"},"content":"            config.setIsLastModifiedDateIncluded(isLastModifiedDateIncluded);"},{"lineNumber":101,"author":{"gitId":"jamessspanggg"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void setIsShallowCloningPerformedToRepoConfigs(List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                                                                 boolean isShallowCloningPerformed) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (isShallowCloningPerformed) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setIsShallowCloningPerformed(true));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Merges a {@code RepoConfiguration} from {@code repoConfigs} with an {@code AuthorConfiguration} from"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * {@code authorConfigs} if their {@code RepoLocation} and branch matches"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static void merge(List\u003cRepoConfiguration\u003e repoConfigs, List\u003cAuthorConfiguration\u003e authorConfigs) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        for (AuthorConfiguration authorConfig : authorConfigs) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            if (authorConfig.getLocation().isEmpty()) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                    repoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e locationMatchingRepoConfigs \u003d"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    getMatchingRepoConfigsByLocation(repoConfigs, authorConfig.getLocation());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"            if (locationMatchingRepoConfigs.isEmpty()) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":129,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\","},{"lineNumber":130,"author":{"gitId":"-"},"content":"                        authorConfig.getLocation()));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            if (authorConfig.isDefaultBranch()) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                locationMatchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                    matchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                });"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"            RepoConfiguration branchMatchingRepoConfig \u003d getMatchingRepoConfig(repoConfigs, authorConfig);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"            if (branchMatchingRepoConfig \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                if (!authorConfig.isDefaultBranch()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                    logger.warning(String.format("},{"lineNumber":145,"author":{"gitId":"-"},"content":"                            \"Repository %s (branch %s) is not found in repo-config.csv.\","},{"lineNumber":146,"author":{"gitId":"-"},"content":"                            authorConfig.getLocation(), authorConfig.getBranch()));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"            branchMatchingRepoConfig.addAuthors(authorConfig.getAuthorList());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Sets the list of groups in {@code groupConfigs} to the respective {@code repoConfigs}."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public static void setGroupConfigsToRepos(List\u003cRepoConfiguration\u003e repoConfigs,"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            List\u003cGroupConfiguration\u003e groupConfigs) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        for (GroupConfiguration groupConfig : groupConfigs) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e matchingRepoConfigs;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            if (groupConfig.getLocation().isEmpty()) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d repoConfigs;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                matchingRepoConfigs \u003d getMatchingRepoConfigsByLocation(repoConfigs,"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                        groupConfig.getLocation());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            if (matchingRepoConfigs.isEmpty()) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                logger.warning(String.format("},{"lineNumber":170,"author":{"gitId":"-"},"content":"                        \"Repository %s is not found in repo-config.csv.\", groupConfig.getLocation()));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                continue;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            matchingRepoConfigs.forEach(matchingRepoConfig -\u003e {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                matchingRepoConfig.addGroups(groupConfig.getGroupsList());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            });"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Iterates through {@code repoConfigs} to find a {@code RepoConfiguration} with {@code RepoLocation} and branch"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * that matches {@code authorConfig}. Returns {@code null} if no match is found."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private static RepoConfiguration getMatchingRepoConfig("},{"lineNumber":184,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e repoConfigs, AuthorConfiguration authorConfig) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        if (authorConfig.isDefaultBranch()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return null;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        for (RepoConfiguration repoConfig : repoConfigs) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            if (repoConfig.getLocation().equals(authorConfig.getLocation())"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                    \u0026\u0026 repoConfig.getBranch().equals(authorConfig.getBranch())) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                return repoConfig;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        return null;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"     * Returns a list of {@link RepoConfiguration} where the {@link RepoLocation} matches {@code targetRepoLocation}."},{"lineNumber":199,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    private static List\u003cRepoConfiguration\u003e getMatchingRepoConfigsByLocation("},{"lineNumber":201,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs, RepoLocation targetRepoLocation) {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        return configs.stream().filter(config -\u003e config.getLocation().equals(targetRepoLocation))"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     * Sets {@code formats} to {@code RepoConfiguration} in {@code configs} if its format list is empty."},{"lineNumber":208,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public static void setFormatsToRepoConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cFileType\u003e formats) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (!config.fileTypeManager.hasSpecifiedFormats()) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                config.fileTypeManager.setFormats(formats);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * Sets each {@code RepoConfiguration} in {@code configs} to ignore its standalone config, if"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     * {@code ignoreAllStandaloneConfigs} is true."},{"lineNumber":220,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    public static void setStandaloneConfigIgnoredToRepoConfigs("},{"lineNumber":222,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs, boolean ignoreAllStandaloneConfigs) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (ignoreAllStandaloneConfigs) {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            configs.stream().forEach(config -\u003e config.setStandaloneConfigIgnored(true));"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Clears existing information related to this repository and its authors, and replaces it with information from the"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * {@code standaloneConfig}."},{"lineNumber":231,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public void update(StandaloneConfig standaloneConfig) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        // only assign the new values when all the fields in {@code standaloneConfig} pass the validations."},{"lineNumber":234,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e replacementFileTypes \u003d FileType.convertFormatStringsToFileTypes(standaloneConfig.getFormats());"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        CommitHash.validateCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"        if (!isIgnoreGlobListOverriding) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            ignoreGlobList \u003d standaloneConfig.getIgnoreGlobList();"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        if (!isFormatsOverriding) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            fileTypeManager.setFormats(replacementFileTypes);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        if (!isIgnoreCommitListOverriding) {"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            ignoreCommitList \u003d CommitHash.convertStringsToCommits(standaloneConfig.getIgnoreCommitList());"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        if (!isIgnoredAuthorsListOverriding) {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            ignoredAuthorsList \u003d standaloneConfig.getIgnoreAuthorList();"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"-"},"content":"        authorConfig.update(standaloneConfig, ignoreGlobList);"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * Attempts to find matching {@code Author} given a name and an email."},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * If no matching {@code Author} is found, {@code Author#UNKNOWN_AUTHOR} is returned."},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    public Author getAuthor(String name, String email) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthor(name, email);"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Updates branch with {@code currentBranch} if default branch is specified."},{"lineNumber":262,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public void updateBranch(String currentBranch) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * Gets the current branch and updates branch with current branch if default branch is specified."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    public void updateBranch() throws GitBranchException {"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        if (branch.equals(DEFAULT_BRANCH)) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"            String currentBranch \u003d GitBranch.getCurrentBranch(getRepoRoot());"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            setBranch(currentBranch);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitId":"-"},"content":"     * Gets the path to the root folder of the repository."},{"lineNumber":281,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    public String getRepoRoot() {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        String path \u003d FileUtil.REPOS_ADDRESS + File.separator + getRepoFolderName() + File.separator;"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"        if (!getRepoName().isEmpty()) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            path +\u003d getRepoName() + File.separator;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"        return path;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Gets the name of the folder containing the cloned repository; the parent directory of the repo\u0027s root folder."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    public String getRepoFolderName() {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        return repoFolderName;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        if (!(other instanceof RepoConfiguration)) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"        RepoConfiguration otherRepoConfig \u003d (RepoConfiguration) other;"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"        return location.equals(otherRepoConfig.location)"},{"lineNumber":313,"author":{"gitId":"-"},"content":"                \u0026\u0026 branch.equals(otherRepoConfig.branch)"},{"lineNumber":314,"author":{"gitId":"-"},"content":"                \u0026\u0026 authorConfig.equals(otherRepoConfig.authorConfig)"},{"lineNumber":315,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoreGlobList.equals(otherRepoConfig.ignoreGlobList)"},{"lineNumber":316,"author":{"gitId":"-"},"content":"                \u0026\u0026 ignoredAuthorsList.equals(otherRepoConfig.ignoredAuthorsList)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                \u0026\u0026 isStandaloneConfigIgnored \u003d\u003d otherRepoConfig.isStandaloneConfigIgnored"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                \u0026\u0026 fileTypeManager.equals(otherRepoConfig.fileTypeManager)"},{"lineNumber":319,"author":{"gitId":"jamessspanggg"},"content":"                \u0026\u0026 isLastModifiedDateIncluded \u003d\u003d otherRepoConfig.isLastModifiedDateIncluded"},{"lineNumber":320,"author":{"gitId":"-"},"content":"                \u0026\u0026 isFormatsOverriding \u003d\u003d otherRepoConfig.isFormatsOverriding"},{"lineNumber":321,"author":{"gitId":"-"},"content":"                \u0026\u0026 isShallowCloningPerformed \u003d\u003d otherRepoConfig.isShallowCloningPerformed"},{"lineNumber":322,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreGlobListOverriding \u003d\u003d otherRepoConfig.isIgnoreGlobListOverriding"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoreCommitListOverriding \u003d\u003d otherRepoConfig.isIgnoreCommitListOverriding"},{"lineNumber":324,"author":{"gitId":"-"},"content":"                \u0026\u0026 isIgnoredAuthorsListOverriding \u003d\u003d otherRepoConfig.isIgnoredAuthorsListOverriding;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorDisplayNameMap();"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayNameMap(authorDisplayNameMap);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public String getBranch() {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        return branch;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public void setBranch(String branch) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        updateDisplayName(branch);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        updateOutputFolderName(branch);"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        this.branch \u003d branch;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        authorConfig.setBranch(branch);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * Updates the branch in the {@code displayName} to the"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * current {@code branch}."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    public void updateDisplayName(String branch) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        this.displayName \u003d displayName.substring(0, displayName.lastIndexOf(\u0027[\u0027) + 1) + branch + \"]\";"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * Updates the branch in the {@code outputFolderName} to the"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     * current {@code branch}."},{"lineNumber":357,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    public void updateOutputFolderName(String branch) {"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        this.outputFolderName \u003d outputFolderName.substring(0, outputFolderName.lastIndexOf(\u0027_\u0027) + 1) + branch;"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoreGlobList() {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        return ignoreGlobList;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        this.ignoreGlobList \u003d ignoreGlobList;"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    public List\u003cCommitHash\u003e getIgnoreCommitList() {"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        return ignoreCommitList;"},{"lineNumber":372,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"    public void setIgnoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        this.ignoreCommitList \u003d ignoreCommitList;"},{"lineNumber":376,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getIgnoredAuthorsList() {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        return this.ignoredAuthorsList;"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"    public void setIgnoredAuthorsList(List\u003cString\u003e ignoredAuthorsList) {"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        this.ignoredAuthorsList \u003d ignoredAuthorsList;"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"    public boolean isIgnoredAuthorsListOverriding() {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        return this.isIgnoredAuthorsListOverriding;"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"jamessspanggg"},"content":"    public void setIsLastModifiedDateIncluded(boolean lastModifiedDateIncluded) {"},{"lineNumber":391,"author":{"gitId":"jamessspanggg"},"content":"        this.isLastModifiedDateIncluded \u003d lastModifiedDateIncluded;"},{"lineNumber":392,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":393,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"    public void setIsShallowCloningPerformed(boolean isShallowCloningPerformed) {"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        this.isShallowCloningPerformed \u003d isShallowCloningPerformed;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"jamessspanggg"},"content":"    public boolean isLastModifiedDateIncluded() {"},{"lineNumber":399,"author":{"gitId":"jamessspanggg"},"content":"        return this.isLastModifiedDateIncluded;"},{"lineNumber":400,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":401,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"    public boolean isShallowCloningPerformed() {"},{"lineNumber":403,"author":{"gitId":"-"},"content":"        return this.isShallowCloningPerformed;"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"    public void setIsIgnoredAuthorsListOverriding(boolean isIgnoredAuthorsListOverriding) {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        this.isIgnoredAuthorsListOverriding \u003d isIgnoredAuthorsListOverriding;"},{"lineNumber":408,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"    public void removeIgnoredAuthors() {"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        authorConfig.removeIgnoredAuthors(ignoredAuthorsList);"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    public List\u003cAuthor\u003e getAuthorList() {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorList();"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    public void addAuthor(Author author) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        authorConfig.addAuthor(author, this.getIgnoreGlobList());"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"    public void addAuthors(List\u003cAuthor\u003e authorList) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        authorConfig.addAuthors(authorList, this.getIgnoreGlobList());"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"    public void setAuthorConfiguration(AuthorConfiguration authorConfig) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        this.authorConfig \u003d authorConfig;"},{"lineNumber":428,"author":{"gitId":"-"},"content":"        for (Author author : authorConfig.getAuthorList()) {"},{"lineNumber":429,"author":{"gitId":"-"},"content":"            AuthorConfiguration.propagateIgnoreGlobList(author, ignoreGlobList);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":431,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"    public boolean containsAuthor(Author author) {"},{"lineNumber":434,"author":{"gitId":"-"},"content":"        return authorConfig.containsAuthor(author);"},{"lineNumber":435,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":""},{"lineNumber":437,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":438,"author":{"gitId":"-"},"content":"     * Clears authors information and sets the {@code authorList} to {@code RepoConfiguration}."},{"lineNumber":439,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":440,"author":{"gitId":"-"},"content":"    public void setAuthorList(List\u003cAuthor\u003e authorList) {"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        authorConfig.clear();"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorList(authorList);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        authorConfig.buildFromAuthorList();"},{"lineNumber":444,"author":{"gitId":"-"},"content":"        authorList.forEach(author -\u003e AuthorConfiguration.propagateIgnoreGlobList(author, this.getIgnoreGlobList()));"},{"lineNumber":445,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":446,"author":{"gitId":"-"},"content":""},{"lineNumber":447,"author":{"gitId":"-"},"content":"    public Map\u003cString, Author\u003e getAuthorDetailsToAuthorMap() {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        return authorConfig.getAuthorDetailsToAuthorMap();"},{"lineNumber":449,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":450,"author":{"gitId":"-"},"content":""},{"lineNumber":451,"author":{"gitId":"-"},"content":"    public void setAuthorDetailsToAuthorMap(Map\u003cString, Author\u003e authorDetailsToAuthorMap) {"},{"lineNumber":452,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDetailsToAuthorMap(authorDetailsToAuthorMap);"},{"lineNumber":453,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":454,"author":{"gitId":"-"},"content":""},{"lineNumber":455,"author":{"gitId":"-"},"content":"    public void setFormats(List\u003cFileType\u003e formats) {"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        fileTypeManager.setFormats(formats);"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"    private void setGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":460,"author":{"gitId":"-"},"content":"        fileTypeManager.setGroups(groups);"},{"lineNumber":461,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":462,"author":{"gitId":"-"},"content":""},{"lineNumber":463,"author":{"gitId":"-"},"content":"    public void addGroups(List\u003cFileType\u003e groups) {"},{"lineNumber":464,"author":{"gitId":"-"},"content":"        fileTypeManager.addGroups(groups);"},{"lineNumber":465,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":468,"author":{"gitId":"-"},"content":"     * Returns all format or group types (depending on whether the user has specified a custom grouping)."},{"lineNumber":469,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":470,"author":{"gitId":"-"},"content":"    public List\u003cFileType\u003e getAllFileTypes() {"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        return fileTypeManager.getAllFileTypes();"},{"lineNumber":472,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":473,"author":{"gitId":"-"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"    public FileType getFileType(String fileName) {"},{"lineNumber":475,"author":{"gitId":"-"},"content":"        return fileTypeManager.getFileType(fileName);"},{"lineNumber":476,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"-"},"content":"    public FileTypeManager getFileTypeManager() {"},{"lineNumber":479,"author":{"gitId":"-"},"content":"        return fileTypeManager;"},{"lineNumber":480,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"-"},"content":""},{"lineNumber":482,"author":{"gitId":"-"},"content":"    public Date getSinceDate() {"},{"lineNumber":483,"author":{"gitId":"-"},"content":"        return sinceDate;"},{"lineNumber":484,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":485,"author":{"gitId":"-"},"content":""},{"lineNumber":486,"author":{"gitId":"-"},"content":"    public void setSinceDate(Date sinceDate) {"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        this.sinceDate \u003d sinceDate;"},{"lineNumber":488,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":489,"author":{"gitId":"-"},"content":""},{"lineNumber":490,"author":{"gitId":"-"},"content":"    public Date getUntilDate() {"},{"lineNumber":491,"author":{"gitId":"-"},"content":"        return untilDate;"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"    public void setUntilDate(Date untilDate) {"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        this.untilDate \u003d untilDate;"},{"lineNumber":496,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":497,"author":{"gitId":"-"},"content":""},{"lineNumber":498,"author":{"gitId":"-"},"content":"    public String getZoneId() {"},{"lineNumber":499,"author":{"gitId":"-"},"content":"        return zoneId;"},{"lineNumber":500,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"    public void setZoneId(String zoneId) {"},{"lineNumber":503,"author":{"gitId":"-"},"content":"        this.zoneId \u003d zoneId;"},{"lineNumber":504,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"    public void setAuthorDisplayName(Author author, String displayName) {"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        authorConfig.setAuthorDisplayName(author, displayName);"},{"lineNumber":508,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":509,"author":{"gitId":"-"},"content":""},{"lineNumber":510,"author":{"gitId":"-"},"content":"    public void addAuthorDetailsToAuthorMapEntry(Author author, List\u003cString\u003e values) {"},{"lineNumber":511,"author":{"gitId":"-"},"content":"        authorConfig.addAuthorDetailsToAuthorMapEntry(author, values);"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":513,"author":{"gitId":"-"},"content":""},{"lineNumber":514,"author":{"gitId":"-"},"content":"    public String getDisplayName() {"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        return displayName;"},{"lineNumber":516,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":517,"author":{"gitId":"-"},"content":""},{"lineNumber":518,"author":{"gitId":"-"},"content":"    public String getRepoName() {"},{"lineNumber":519,"author":{"gitId":"-"},"content":"        return location.getRepoName();"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":521,"author":{"gitId":"-"},"content":""},{"lineNumber":522,"author":{"gitId":"-"},"content":"    public String getOutputFolderName() {"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        return outputFolderName;"},{"lineNumber":524,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":"    public void setStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"},{"lineNumber":527,"author":{"gitId":"-"},"content":"        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"},{"lineNumber":528,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"    public RepoLocation getLocation() {"},{"lineNumber":531,"author":{"gitId":"-"},"content":"        return location;"},{"lineNumber":532,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"    public String getOrganization() {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        return location.getOrganization();"},{"lineNumber":536,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":537,"author":{"gitId":"-"},"content":""},{"lineNumber":538,"author":{"gitId":"-"},"content":"    public boolean isStandaloneConfigIgnored() {"},{"lineNumber":539,"author":{"gitId":"-"},"content":"        return isStandaloneConfigIgnored;"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":541,"author":{"gitId":"-"},"content":""},{"lineNumber":542,"author":{"gitId":"-"},"content":"    public boolean isFormatsOverriding() {"},{"lineNumber":543,"author":{"gitId":"-"},"content":"        return isFormatsOverriding;"},{"lineNumber":544,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"-"},"content":""},{"lineNumber":546,"author":{"gitId":"-"},"content":"    public boolean isIgnoreGlobListOverriding() {"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        return isIgnoreGlobListOverriding;"},{"lineNumber":548,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":549,"author":{"gitId":"-"},"content":""},{"lineNumber":550,"author":{"gitId":"-"},"content":"    public boolean isIgnoreCommitListOverriding() {"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        return isIgnoreCommitListOverriding;"},{"lineNumber":552,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":553,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":17,"-":536}},{"path":"src/main/java/reposense/parser/ArgsParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.time.Instant;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.time.ZoneOffset;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Calendar;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.ArgumentParsers;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.Arguments;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.HelpArgumentAction;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.impl.action.VersionArgumentAction;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParser;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.ArgumentParserException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.MutuallyExclusiveGroup;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.inf.Namespace;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Verifies and parses a string-formatted date to a {@code CliArguments} object."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class ArgsParser {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_REPORT_NAME \u003d \"reposense-report\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String[] HELP_FLAGS \u003d new String[]{\"--help\", \"-h\"};"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String[] CONFIG_FLAGS \u003d new String[]{\"--config\", \"-c\"};"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String[] REPO_FLAGS \u003d new String[]{\"--repo\", \"--repos\", \"-r\"};"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String[] VIEW_FLAGS \u003d new String[]{\"--view\", \"-v\"};"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String[] OUTPUT_FLAGS \u003d new String[]{\"--output\", \"-o\"};"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String[] ASSETS_FLAGS \u003d new String[]{\"--assets\", \"-a\"};"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String[] SINCE_FLAGS \u003d new String[]{\"--since\", \"-s\"};"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String[] UNTIL_FLAGS \u003d new String[]{\"--until\", \"-u\"};"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String[] PERIOD_FLAGS \u003d new String[]{\"--period\", \"-p\"};"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String[] SHALLOW_CLONING_FLAGS \u003d new String[]{\"--shallow-cloning\", \"-S\"};"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String[] FORMAT_FLAGS \u003d new String[]{\"--formats\", \"-f\"};"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String[] IGNORE_FLAGS \u003d new String[]{\"--ignore-standalone-config\", \"-i\"};"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String[] TIMEZONE_FLAGS \u003d new String[]{\"--timezone\", \"-t\"};"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String[] VERSION_FLAGS \u003d new String[]{\"--version\", \"-V\"};"},{"lineNumber":53,"author":{"gitId":"jamessspanggg"},"content":"    public static final String[] LAST_MODIFIED_DATE_FLAGS \u003d new String[]{\"--last-modified-date\", \"-l\"};"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ArgsParser.class);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_USAGE \u003d \"java -jar RepoSense.jar\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private static final String PROGRAM_DESCRIPTION \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            \"RepoSense is a contribution analysis tool for Git repositories.\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HEADER_MUTEX \u003d \"mutual exclusive arguments\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\".\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\" must not be later than today\u0027s date.\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \"\\\"Since Date\\\", \\\"Until Date\\\", and \\\"Period\\\" cannot be applied together.\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_USING_DEFAULT_CONFIG_PATH \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \"Config path not provided, using the config folder as default.\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_CONFIG_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final Path DEFAULT_ASSETS_PATH \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + File.separator + \"assets\" + File.separator);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private static ArgumentParser getArgumentParser() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        ArgumentParser parser \u003d ArgumentParsers"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .newFor(PROGRAM_USAGE)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .addHelp(false)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .build()"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .description(PROGRAM_DESCRIPTION);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser \u003d parser"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        MutuallyExclusiveGroup mutexParser2 \u003d parser"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .addMutuallyExclusiveGroup(MESSAGE_HEADER_MUTEX)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .required(false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // Boolean flags"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        parser.addArgument(HELP_FLAGS)"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .help(\"Show help message.\")"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .action(new HelpArgumentAction());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        parser.version(\"RepoSense \" + RepoSense.getVersion());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        parser.addArgument(VERSION_FLAGS)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .help(\"Show the version of RepoSense.\")"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                .action(new VersionArgumentAction());"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        parser.addArgument(IGNORE_FLAGS)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                .dest(IGNORE_FLAGS[0])"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                .help(\"A flag to ignore the standalone config file in the repo.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        parser.addArgument(VIEW_FLAGS)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                .dest(VIEW_FLAGS[0])"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .nargs(\"?\")"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .type(new ReportFolderArgumentType())"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .setConst(EMPTY_PATH)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .help(\"Starts a server to display the report in the provided directory. \""},{"lineNumber":112,"author":{"gitId":"-"},"content":"                        + \"If used as a flag (with no argument), \""},{"lineNumber":113,"author":{"gitId":"-"},"content":"                        + \"generates a report and automatically displays the report.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        parser.addArgument(OUTPUT_FLAGS)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .dest(OUTPUT_FLAGS[0])"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .type(new OutputFolderArgumentType())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .setDefault(Paths.get(ArgsParser.DEFAULT_REPORT_NAME))"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .help(\"The directory to output the report folder, reposense-report. \""},{"lineNumber":121,"author":{"gitId":"-"},"content":"                        + \"If not provided, the report folder will be created in the current working directory.\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        parser.addArgument(ASSETS_FLAGS)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .dest(ASSETS_FLAGS[0])"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .type(new AssetsFolderArgumentType())"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_ASSETS_PATH)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .help(\"The directory to place assets files to customize report generation. \""},{"lineNumber":129,"author":{"gitId":"-"},"content":"                        + \"If not provided, the assets folder in the current working directory will be used.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        parser.addArgument(SINCE_FLAGS)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .dest(SINCE_FLAGS[0])"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .type(new SinceDateArgumentType())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .help(\"The date to start filtering.\");"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        parser.addArgument(UNTIL_FLAGS)"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .dest(UNTIL_FLAGS[0])"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .metavar(\"dd/MM/yyyy\")"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .type(new UntilDateArgumentType())"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .help(\"The date to stop filtering.\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        parser.addArgument(PERIOD_FLAGS)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .dest(PERIOD_FLAGS[0])"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .metavar(\"PERIOD\")"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .type(new PeriodArgumentType())"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .setDefault(Optional.empty())"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                .help(\"The number of days of the filtering window.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        parser.addArgument(FORMAT_FLAGS)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .dest(FORMAT_FLAGS[0])"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .nargs(\"*\")"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .metavar(\"FORMAT\")"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                .type(new AlphanumericArgumentType())"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                .setDefault(Collections.emptyList())"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .help(\"The alphanumeric file formats to process.\\n\""},{"lineNumber":159,"author":{"gitId":"-"},"content":"                        + \"If not provided, default file formats will be used.\\n\""},{"lineNumber":160,"author":{"gitId":"-"},"content":"                        + \"Please refer to userguide for more information.\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        parser.addArgument(TIMEZONE_FLAGS)"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                .dest(TIMEZONE_FLAGS[0])"},{"lineNumber":164,"author":{"gitId":"-"},"content":"                .metavar(\"ZONE_ID[±hh[mm]]\")"},{"lineNumber":165,"author":{"gitId":"-"},"content":"                .type(new ZoneIdArgumentType())"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                .setDefault(ZoneId.systemDefault())"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                .help(\"The timezone to use for the generated report. \""},{"lineNumber":168,"author":{"gitId":"-"},"content":"                        + \"One kind of valid timezones is relative to UTC. E.g. UTC, UTC+08, UTC-1030. \\n\""},{"lineNumber":169,"author":{"gitId":"-"},"content":"                        + \"If not provided, system default timezone will be used.\");"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // Mutex flags - these will always be the last parameters in help message."},{"lineNumber":172,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(CONFIG_FLAGS)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .dest(CONFIG_FLAGS[0])"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                .type(new ConfigFolderArgumentType())"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                .metavar(\"PATH\")"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .setDefault(DEFAULT_CONFIG_PATH)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .help(\"The directory containing the config files.\""},{"lineNumber":178,"author":{"gitId":"-"},"content":"                        + \"If not provided, the config files will be obtained from the config folder.\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        mutexParser.addArgument(REPO_FLAGS)"},{"lineNumber":181,"author":{"gitId":"-"},"content":"                .nargs(\"+\")"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .dest(REPO_FLAGS[0])"},{"lineNumber":183,"author":{"gitId":"-"},"content":"                .metavar(\"LOCATION\")"},{"lineNumber":184,"author":{"gitId":"-"},"content":"                .help(\"The GitHub URL or disk locations to clone repository.\");"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(LAST_MODIFIED_DATE_FLAGS)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                .dest(LAST_MODIFIED_DATE_FLAGS[0])"},{"lineNumber":188,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                .help(\"A flag to keep track of the last modified date of each line of code.\");"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        mutexParser2.addArgument(SHALLOW_CLONING_FLAGS)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                .dest(SHALLOW_CLONING_FLAGS[0])"},{"lineNumber":193,"author":{"gitId":"-"},"content":"                .action(Arguments.storeTrue())"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                .help(\"A flag to make RepoSense employ Git\u0027s shallow cloning functionality, which can significantly \""},{"lineNumber":195,"author":{"gitId":"-"},"content":"                        + \"reduce the time taken to clone large repositories. This flag should not be used for \""},{"lineNumber":196,"author":{"gitId":"-"},"content":"                        + \"smaller repositories, where the .git file is smaller than 500 MB.\");"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        return parser;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     * Parses the given string arguments to a {@code CliArguments} object."},{"lineNumber":203,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @throws HelpScreenException if given args contain the --help flag. Help message will be printed out"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     * by the {@code ArgumentParser} hence this is to signal to the caller that the program is safe to exit."},{"lineNumber":206,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given string arguments fails to parse to a {@code CliArguments} object."},{"lineNumber":207,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    public static CliArguments parse(String[] args) throws HelpScreenException, ParseException {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            ArgumentParser parser \u003d getArgumentParser();"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            Namespace results \u003d parser.parseArgs(args);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            Date sinceDate;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            Date untilDate;"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"            Path configFolderPath \u003d results.get(CONFIG_FLAGS[0]);"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            Path reportFolderPath \u003d results.get(VIEW_FLAGS[0]);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            Path outputFolderPath \u003d results.get(OUTPUT_FLAGS[0]);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"            ZoneId zoneId \u003d results.get(TIMEZONE_FLAGS[0]);"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            Path assetsFolderPath \u003d results.get(ASSETS_FLAGS[0]);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            Optional\u003cDate\u003e cliSinceDate \u003d results.get(SINCE_FLAGS[0]);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            Optional\u003cDate\u003e cliUntilDate \u003d results.get(UNTIL_FLAGS[0]);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            boolean isSinceDateProvided \u003d cliSinceDate.isPresent();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            boolean isUntilDateProvided \u003d cliUntilDate.isPresent();"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            Optional\u003cInteger\u003e cliPeriod \u003d results.get(PERIOD_FLAGS[0]);"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            boolean isPeriodProvided \u003d cliPeriod.isPresent();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (isSinceDateProvided \u0026\u0026 isUntilDateProvided \u0026\u0026 isPeriodProvided) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                throw new ParseException(MESSAGE_HAVE_SINCE_DATE_UNTIL_DATE_AND_PERIOD);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"            Date currentDate \u003d getCurrentDate(zoneId);"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"            if (isSinceDateProvided) {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                sinceDate \u003d getZonedSinceDate(cliSinceDate.get(), zoneId);"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                sinceDate \u003d isPeriodProvided"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                        ? getDateMinusNDays(cliUntilDate, zoneId, cliPeriod.get())"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                        : getDateMinusAMonth(cliUntilDate, zoneId);"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"            if (isUntilDateProvided) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                untilDate \u003d getZonedUntilDate(cliUntilDate.get(), zoneId);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                untilDate \u003d (isSinceDateProvided \u0026\u0026 isPeriodProvided)"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                        ? getDatePlusNDays(cliSinceDate, zoneId, cliPeriod.get())"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                        : currentDate;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"            untilDate \u003d untilDate.compareTo(currentDate) \u003c 0"},{"lineNumber":249,"author":{"gitId":"-"},"content":"                    ? untilDate"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                    : currentDate;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            List\u003cString\u003e locations \u003d results.get(REPO_FLAGS[0]);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            List\u003cFileType\u003e formats \u003d FileType.convertFormatStringsToFileTypes(results.get(FORMAT_FLAGS[0]));"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            boolean isStandaloneConfigIgnored \u003d results.get(IGNORE_FLAGS[0]);"},{"lineNumber":254,"author":{"gitId":"jamessspanggg"},"content":"            boolean shouldIncludeLastModifiedDate \u003d results.get(LAST_MODIFIED_DATE_FLAGS[0]);"},{"lineNumber":255,"author":{"gitId":"-"},"content":"            boolean shouldPerformShallowCloning \u003d results.get(SHALLOW_CLONING_FLAGS[0]);"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"            LogsManager.setLogFolderLocation(outputFolderPath);"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"            verifySinceDateIsValid(sinceDate);"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            verifyDatesRangeIsCorrect(sinceDate, untilDate);"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"            if (reportFolderPath !\u003d null \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                    \u0026\u0026 configFolderPath.equals(DEFAULT_CONFIG_PATH) \u0026\u0026 locations \u003d\u003d null) {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"                return new ViewCliArguments(reportFolderPath);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":"            boolean isAutomaticallyLaunching \u003d reportFolderPath !\u003d null;"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"            if (isAutomaticallyLaunching \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)) {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                logger.info(String.format(\"Ignoring argument \u0027%s\u0027 for --view.\", reportFolderPath.toString()));"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"            if (locations !\u003d null) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                return new LocationsCliArguments(locations, outputFolderPath, assetsFolderPath, sinceDate, untilDate,"},{"lineNumber":275,"author":{"gitId":"jamessspanggg"},"content":"                        isSinceDateProvided, isUntilDateProvided, formats, shouldIncludeLastModifiedDate,"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                        shouldPerformShallowCloning, isAutomaticallyLaunching, isStandaloneConfigIgnored, zoneId);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"            if (configFolderPath.equals(EMPTY_PATH)) {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"                logger.info(MESSAGE_USING_DEFAULT_CONFIG_PATH);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":282,"author":{"gitId":"-"},"content":"            return new ConfigCliArguments(configFolderPath, outputFolderPath, assetsFolderPath, sinceDate, untilDate,"},{"lineNumber":283,"author":{"gitId":"jamessspanggg"},"content":"                    isSinceDateProvided, isUntilDateProvided, formats, shouldIncludeLastModifiedDate,"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                    shouldPerformShallowCloning, isAutomaticallyLaunching, isStandaloneConfigIgnored, zoneId);"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        } catch (HelpScreenException hse) {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"            throw hse;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        } catch (ArgumentParserException ape) {"},{"lineNumber":288,"author":{"gitId":"-"},"content":"            throw new ParseException(getArgumentParser().formatUsage() + ape.getMessage() + \"\\n\");"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitId":"-"},"content":"     * Returns a {@code Date} that is set to midnight for the given {@code zoneId}."},{"lineNumber":294,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    private static Date getZonedSinceDate(Date sinceDate, ZoneId zoneId) {"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        if (sinceDate.equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE)) {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            return sinceDate;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"        int zoneRawOffset \u003d getZoneRawOffset(zoneId);"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        int systemRawOffset \u003d getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"        Calendar cal \u003d new Calendar"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                .Builder()"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                .setInstant(sinceDate.getTime())"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, 0);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, 0);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, 0);"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, systemRawOffset - zoneRawOffset);"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":316,"author":{"gitId":"-"},"content":"     * Returns a {@code Date} that is set to 23:59:59 for the given {@code zoneId}."},{"lineNumber":317,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    private static Date getZonedUntilDate(Date untilDate, ZoneId zoneId) {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        int zoneRawOffset \u003d getZoneRawOffset(zoneId);"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        int systemRawOffset \u003d getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":321,"author":{"gitId":"-"},"content":""},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Calendar cal \u003d new Calendar"},{"lineNumber":323,"author":{"gitId":"-"},"content":"                .Builder()"},{"lineNumber":324,"author":{"gitId":"-"},"content":"                .setInstant(untilDate.getTime())"},{"lineNumber":325,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, 23);"},{"lineNumber":327,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, 59);"},{"lineNumber":328,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, 59);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":330,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, systemRawOffset - zoneRawOffset);"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":335,"author":{"gitId":"-"},"content":"     * Returns a {@code Date} that is one month before {@code cliUntilDate} (if present) or one month before report"},{"lineNumber":336,"author":{"gitId":"-"},"content":"     * generation date otherwise. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":337,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    private static Date getDateMinusAMonth(Optional\u003cDate\u003e cliUntilDate, ZoneId zoneId) {"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        cliUntilDate.ifPresent(cal::setTime);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        cal.setTime(getZonedSinceDate(cal.getTime(), zoneId));"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MONTH, -1);"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * Returns a {@code Date} that is {@code numOfDays} before {@code cliUntilDate} (if present) or one month before"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * report generation date otherwise. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    private static Date getDateMinusNDays(Optional\u003cDate\u003e cliUntilDate, ZoneId zoneId, int numOfDays) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        cliUntilDate.ifPresent(cal::setTime);"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        cal.setTime(getZonedSinceDate(cal.getTime(), zoneId));"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        cal.add(Calendar.DATE, -numOfDays + 1);"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * Returns a {@code Date} that is {@code numOfDays} after {@code cliSinceDate} (if present). The time zone is"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * adjusted to the given {@code zoneId}."},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private static Date getDatePlusNDays(Optional\u003cDate\u003e cliSinceDate, ZoneId zoneId, int numOfDays) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        cliSinceDate.ifPresent(cal::setTime);"},{"lineNumber":365,"author":{"gitId":"-"},"content":"        cal.setTime(getZonedUntilDate(cal.getTime(), zoneId));"},{"lineNumber":366,"author":{"gitId":"-"},"content":"        cal.add(Calendar.DATE, numOfDays - 1);"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":368,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":371,"author":{"gitId":"-"},"content":"     * Returns current date with time set to 23:59:59. The time zone is adjusted to the given {@code zoneId}."},{"lineNumber":372,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":373,"author":{"gitId":"-"},"content":"    private static Date getCurrentDate(ZoneId zoneId) {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":375,"author":{"gitId":"-"},"content":"        cal.setTime(getZonedUntilDate(cal.getTime(), zoneId));"},{"lineNumber":376,"author":{"gitId":"-"},"content":"        return cal.getTime();"},{"lineNumber":377,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":380,"author":{"gitId":"-"},"content":"     * Verifies that {@code sinceDate} is earlier than {@code untilDate}."},{"lineNumber":381,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":382,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than {@code untilDate}."},{"lineNumber":383,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":384,"author":{"gitId":"-"},"content":"    private static void verifyDatesRangeIsCorrect(Date sinceDate, Date untilDate)"},{"lineNumber":385,"author":{"gitId":"-"},"content":"            throws ParseException {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        if (sinceDate.getTime() \u003e untilDate.getTime()) {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"},{"lineNumber":388,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":392,"author":{"gitId":"-"},"content":"     * Verifies that {@code sinceDate} is no later than the date of report generation."},{"lineNumber":393,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":394,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code sinceDate} supplied is later than date of report generation."},{"lineNumber":395,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    private static void verifySinceDateIsValid(Date sinceDate) throws ParseException {"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        Date dateToday \u003d new Date();"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        if (sinceDate.getTime() \u003e dateToday.getTime()) {"},{"lineNumber":399,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_TODAY_DATE);"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":404,"author":{"gitId":"-"},"content":"     * Get the raw offset in milliseconds for the {@code zoneId} timezone compared to UTC."},{"lineNumber":405,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":406,"author":{"gitId":"-"},"content":"    private static int getZoneRawOffset(ZoneId zoneId) {"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        ZoneOffset zoneOffset \u003d zoneId.getRules().getOffset(now);"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        return zoneOffset.getTotalSeconds() * 1000;"},{"lineNumber":410,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":411,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":4,"-":407}},{"path":"src/main/java/reposense/report/ReportGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.report;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Iterator;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import com.google.gson.JsonSyntaxException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.authorship.AuthorshipReporter;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.authorship.model.AuthorshipSummary;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.commits.CommitsReporter;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.commits.model.CommitContributionSummary;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.git.GitLsTree;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.git.GitRevParse;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.git.GitShortlog;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitBranchException;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import reposense.git.exception.GitCloneException;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import reposense.git.exception.InvalidFilePathException;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import reposense.model.StandaloneConfig;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import reposense.parser.StandaloneConfigJsonParser;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import reposense.report.exception.NoAuthorsWithCommitsFoundException;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import reposense.system.LogsManager;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import reposense.util.ProgressTracker;"},{"lineNumber":53,"author":{"gitId":"jamessspanggg"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":56,"author":{"gitId":"-"},"content":" * Contains report generation related functionalities."},{"lineNumber":57,"author":{"gitId":"-"},"content":" */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"public class ReportGenerator {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // zip file which contains all the report template files"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static final String INDEX_PAGE_TEMPLATE \u003d \"index.html\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static final String INDEX_PAGE_DEFAULT_TITLE \u003d \"\u003ctitle\u003eRepoSense Report\u003c/title\u003e\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by %s (%s).\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_ERROR_CREATING_DIRECTORY \u003d"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            \"Error has occurred while creating repo directory for %s (%s), will skip this repo.\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_STANDALONE_CONFIG \u003d \"%s (%s) does not contain a standalone config file.\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_IGNORING_STANDALONE_CONFIG \u003d \"Ignoring standalone config file in %s (%s).\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_MALFORMED_STANDALONE_CONFIG \u003d \"%s/%s/%s is malformed for %s (%s).\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_SPECIFIED \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            \"%s (%s) has no authors specified, using all authors by default.\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"No authors found with commits for %s (%s).\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_START_ANALYSIS \u003d \"Analyzing %s (%s)...\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_COMPLETE_ANALYSIS \u003d \"Analysis of %s (%s) completed!\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_REPORT_GENERATED \u003d \"The report is generated at %s\";"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_BRANCH_DOES_NOT_EXIST \u003d \"Branch %s does not exist in %s! Analysis terminated.\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING \u003d \"Failed to clone from %s\";"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_DOES_NOT_EXIST \u003d \"Branch \\\"%s\\\" does not exist.\";"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static final String LOG_BRANCH_CONTAINS_ILLEGAL_FILE_PATH \u003d"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            \"Branch contains file paths with illegal characters and not analyzable.\";"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static final String LOG_ERROR_CLONING_OR_BRANCHING \u003d \"Exception met while cloning or checking out.\";"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static final String LOG_UNEXPECTED_ERROR \u003d \"Unexpected error stack trace for %s:\\n\u003e%s\";"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static Date earliestSinceDate \u003d null;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static ProgressTracker progressTracker \u003d null;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e assetsFilesWhiteList \u003d"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Collections.unmodifiableList(Arrays.asList(new String[] {\"favicon.ico\"}));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * well as the summary JSON file of all the repos."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @return the list of file paths that were generated."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @throws IOException if templateZip.zip does not exists in jar file."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static List\u003cPath\u003e generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath, String assetsPath,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            ReportConfiguration reportConfig, String generationDate, Date cliSinceDate, Date untilDate,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            boolean isSinceDateProvided, boolean isUntilDateProvided,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Supplier\u003cString\u003e reportGenerationTimeProvider, ZoneId zoneId) throws IOException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        prepareTemplateFile(reportConfig, outputPath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (Files.exists(Paths.get(assetsPath))) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            FileUtil.copyDirectoryContents(assetsPath, outputPath, assetsFilesWhiteList);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        earliestSinceDate \u003d null;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        progressTracker \u003d new ProgressTracker(configs.size());"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e reportFoldersAndFiles \u003d cloneAndAnalyzeRepos(configs, outputPath);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Date reportSinceDate \u003d (cliSinceDate.equals(SinceDateArgumentType.ARBITRARY_FIRST_COMMIT_DATE))"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                ? earliestSinceDate : cliSinceDate;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Optional\u003cPath\u003e summaryPath \u003d FileUtil.writeJsonFile("},{"lineNumber":120,"author":{"gitId":"-"},"content":"                new SummaryJson(configs, reportConfig, generationDate,"},{"lineNumber":121,"author":{"gitId":"jamessspanggg"},"content":"                        TimeUtil.getZonedDateFromSystemDate(reportSinceDate, zoneId),"},{"lineNumber":122,"author":{"gitId":"jamessspanggg"},"content":"                        TimeUtil.getZonedDateFromSystemDate(untilDate, zoneId), isSinceDateProvided,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                        isUntilDateProvided, RepoSense.getVersion(), ErrorSummary.getInstance().getErrorList(),"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                        reportGenerationTimeProvider.get(), zoneId.toString()),"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                getSummaryResultPath(outputPath));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        summaryPath.ifPresent(reportFoldersAndFiles::add);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_REPORT_GENERATED, outputPath));"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return reportFoldersAndFiles;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Copies the template file to the specified {@code outputPath} for the repo report to be generated."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @throws IOException if template resource is not found."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private static void prepareTemplateFile(ReportConfiguration config, String outputPath) throws IOException {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        FileUtil.copyTemplate(is, outputPath);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        setReportConfiguration(config, outputPath);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private static void setReportConfiguration(ReportConfiguration config, String outputPath) throws IOException {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        setLandingPageTitle(outputPath, config.getTitle());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * Set title of template file located at {@code filePath} to {@code pageTitle}"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    private static void setLandingPageTitle(String filePath, String pageTitle) throws IOException {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Path indexPagePath \u003d Paths.get(filePath, INDEX_PAGE_TEMPLATE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        String line \u003d new String(Files.readAllBytes(indexPagePath));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String newLine \u003d line.replaceAll(INDEX_PAGE_DEFAULT_TITLE, \"\u003ctitle\u003e\" + escapeHtml4(pageTitle) + \"\u003c/title\u003e\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        Files.write(indexPagePath, newLine.getBytes());"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Groups {@code RepoConfiguration} with the same {@code RepoLocation} together so that they are only cloned once."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private static Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e groupConfigsByRepoLocation("},{"lineNumber":161,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        for (RepoConfiguration config : configs) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            RepoLocation location \u003d config.getLocation();"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"            if (!repoLocationMap.containsKey(location)) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                repoLocationMap.put(location, new ArrayList\u003c\u003e());"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            repoLocationMap.get(location).add(config);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        return repoLocationMap;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * Clone, analyze and generate the report for repositories in {@code repoLocationMap}."},{"lineNumber":176,"author":{"gitId":"-"},"content":"     * Performs analysis and report generation of each repository in parallel with the cloning of the next repository."},{"lineNumber":177,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for each repository."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e cloneAndAnalyzeRepos(List\u003cRepoConfiguration\u003e configs, String outputPath) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Map\u003cRepoLocation, List\u003cRepoConfiguration\u003e\u003e repoLocationMap \u003d groupConfigsByRepoLocation(configs);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        RepoCloner repoCloner \u003d new RepoCloner();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        RepoLocation clonedRepoLocation \u003d null;"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        List\u003cRepoLocation\u003e repoLocationList \u003d new ArrayList\u003c\u003e(repoLocationMap.keySet());"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        RepoLocation currRepoLocation \u003d repoLocationList.get(0);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        repoCloner.cloneBare(repoLocationMap.get(currRepoLocation).get(0));"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        for (int index \u003d 1; index \u003c\u003d repoLocationList.size(); index++) {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            RepoLocation nextRepoLocation \u003d (index \u003c repoLocationList.size()) ? repoLocationList.get(index) : null;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            clonedRepoLocation \u003d repoCloner.getClonedRepoLocation();"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"            // Clones the next location while analyzing the previously cloned repos in parallel."},{"lineNumber":196,"author":{"gitId":"-"},"content":"            if (nextRepoLocation !\u003d null) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                repoCloner.cloneBare(repoLocationMap.get(nextRepoLocation).get(0));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"            if (clonedRepoLocation \u003d\u003d null) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                handleCloningFailed(configs, currRepoLocation);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(analyzeRepos(outputPath, configs, repoLocationMap.get(clonedRepoLocation),"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                        repoCloner.getCurrentRepoDefaultBranch()));"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            currRepoLocation \u003d nextRepoLocation;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        repoCloner.cleanup();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     * Analyzes all repos in {@code configsToAnalyze} and generates their report."},{"lineNumber":214,"author":{"gitId":"-"},"content":"     * Also removes {@code configsToAnalyze} that failed to analyze from {@code configs}."},{"lineNumber":215,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for the repositories in {@code configsToAnalyze}."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e analyzeRepos(String outputPath, List\u003cRepoConfiguration\u003e configs,"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configsToAnalyze, String defaultBranch) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configsToAnalyze.iterator();"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            progressTracker.incrementProgress();"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            RepoConfiguration configToAnalyze \u003d itr.next();"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            configToAnalyze.updateBranch(defaultBranch);"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"            Path repoReportDirectory \u003d Paths.get(outputPath, configToAnalyze.getOutputFolderName());"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            logger.info("},{"lineNumber":229,"author":{"gitId":"-"},"content":"                    String.format(progressTracker.getProgress() + \" \""},{"lineNumber":230,"author":{"gitId":"-"},"content":"                            + MESSAGE_START_ANALYSIS, configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"                GitRevParse.assertBranchExists(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                GitLsTree.validateFilePaths(configToAnalyze, FileUtil.getBareRepoPath(configToAnalyze));"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                GitClone.cloneFromBareAndUpdateBranch(Paths.get(FileUtil.REPOS_ADDRESS), configToAnalyze);"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"                FileUtil.createDirectory(repoReportDirectory);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(analyzeRepo(configToAnalyze, repoReportDirectory.toString()));"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            } catch (IOException ioe) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                String logMessage \u003d String.format(MESSAGE_ERROR_CREATING_DIRECTORY,"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch());"},{"lineNumber":241,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, logMessage, ioe);"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            } catch (GitBranchException gbe) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, String.format(MESSAGE_BRANCH_DOES_NOT_EXIST,"},{"lineNumber":244,"author":{"gitId":"-"},"content":"                        configToAnalyze.getBranch(), configToAnalyze.getLocation()), gbe);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, configToAnalyze,"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                        String.format(LOG_BRANCH_DOES_NOT_EXIST, configToAnalyze.getBranch()));"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            } catch (InvalidFilePathException ipe) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, configToAnalyze, LOG_BRANCH_CONTAINS_ILLEGAL_FILE_PATH);"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            } catch (GitCloneException gce) {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, configToAnalyze, LOG_ERROR_CLONING_OR_BRANCHING);"},{"lineNumber":251,"author":{"gitId":"-"},"content":"            } catch (NoAuthorsWithCommitsFoundException nafe) {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                logger.log(Level.WARNING, String.format(MESSAGE_NO_AUTHORS_WITH_COMMITS_FOUND,"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                        configToAnalyze.getLocation(), configToAnalyze.getBranch()));"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                generatedFiles.addAll(generateEmptyRepoReport(repoReportDirectory.toString(),"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                        Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND));"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                generateEmptyRepoReport(repoReportDirectory.toString(), Author.NAME_NO_AUTHOR_WITH_COMMITS_FOUND);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                StringWriter sw \u003d new StringWriter();"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                e.printStackTrace(new PrintWriter(sw));"},{"lineNumber":260,"author":{"gitId":"-"},"content":"                logger.log(Level.SEVERE, sw.toString());"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                handleAnalysisFailed(configs, configToAnalyze,"},{"lineNumber":262,"author":{"gitId":"-"},"content":"                        String.format(LOG_UNEXPECTED_ERROR, configToAnalyze.getLocation(), sw.toString()));"},{"lineNumber":263,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":269,"author":{"gitId":"-"},"content":"     * Analyzes repo specified by {@code config} and generates the report."},{"lineNumber":270,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for the repo specified by {@code config}."},{"lineNumber":271,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e analyzeRepo("},{"lineNumber":273,"author":{"gitId":"-"},"content":"            RepoConfiguration config, String repoReportDirectory) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        // preprocess the config and repo"},{"lineNumber":275,"author":{"gitId":"-"},"content":"        updateRepoConfig(config);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"        updateAuthorList(config);"},{"lineNumber":277,"author":{"gitId":"-"},"content":"        updateIgnoreCommitList(config);"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"        CommitContributionSummary commitSummary \u003d CommitsReporter.generateCommitSummary(config);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        AuthorshipSummary authorshipSummary \u003d AuthorshipReporter.generateAuthorshipSummary(config);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d generateIndividualRepoReport(repoReportDirectory, commitSummary, authorshipSummary);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        logger.info(String.format(MESSAGE_COMPLETE_ANALYSIS, config.getLocation(), config.getBranch()));"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":287,"author":{"gitId":"-"},"content":"     * Updates {@code config} with configuration provided by repository if exists."},{"lineNumber":288,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public static void updateRepoConfig(RepoConfiguration config) {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        Path configJsonPath \u003d"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"        if (!Files.exists(configJsonPath)) {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"        if (config.isStandaloneConfigIgnored()) {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_IGNORING_STANDALONE_CONFIG, config.getLocation(), config.getBranch()));"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":304,"author":{"gitId":"-"},"content":"            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"            config.update(standaloneConfig);"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        } catch (JsonSyntaxException jse) {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_MALFORMED_STANDALONE_CONFIG, config.getDisplayName(),"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                    REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE, config.getLocation(), config.getBranch()));"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        } catch (IllegalArgumentException iae) {"},{"lineNumber":310,"author":{"gitId":"-"},"content":"            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON,"},{"lineNumber":311,"author":{"gitId":"-"},"content":"                    iae.getMessage(), config.getLocation(), config.getBranch()));"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"            throw new AssertionError("},{"lineNumber":314,"author":{"gitId":"-"},"content":"                    \"This exception should not happen as we have performed the file existence check.\");"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitId":"-"},"content":"     * Find and update {@code config} with all the author identities if author list is empty."},{"lineNumber":320,"author":{"gitId":"-"},"content":"     * Also removes ignored authors from author list."},{"lineNumber":321,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    private static void updateAuthorList(RepoConfiguration config) throws NoAuthorsWithCommitsFoundException {"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        if (config.getAuthorList().isEmpty()) {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"            logger.info(String.format(MESSAGE_NO_AUTHORS_SPECIFIED, config.getLocation(), config.getBranch()));"},{"lineNumber":325,"author":{"gitId":"-"},"content":"            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"            if (authorList.isEmpty()) {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"                throw new NoAuthorsWithCommitsFoundException();"},{"lineNumber":329,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"            config.setAuthorList(authorList);"},{"lineNumber":332,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":333,"author":{"gitId":"-"},"content":"        config.removeIgnoredAuthors();"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":337,"author":{"gitId":"-"},"content":"     * Updates {@code config} with the exact list of commits if commit ranges are provided."},{"lineNumber":338,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    private static void updateIgnoreCommitList(RepoConfiguration config) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cCommitHash\u003e updatedIgnoreCommitList \u003d config.getIgnoreCommitList().stream()"},{"lineNumber":341,"author":{"gitId":"-"},"content":"                .flatMap(x -\u003e CommitHash.getHashes(config.getRepoRoot(), config.getBranch(), x))"},{"lineNumber":342,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(updatedIgnoreCommitList);"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":347,"author":{"gitId":"-"},"content":"     * Adds {@code configs} that were not successfully cloned from {@code failedRepoLocation}"},{"lineNumber":348,"author":{"gitId":"-"},"content":"     * into the list of errors in the summary report and removes them from the list of {@code configs}."},{"lineNumber":349,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    private static void handleCloningFailed(List\u003cRepoConfiguration\u003e configs, RepoLocation failedRepoLocation) {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e failedConfigs \u003d configs.stream()"},{"lineNumber":352,"author":{"gitId":"-"},"content":"                .filter(config -\u003e config.getLocation().equals(failedRepoLocation))"},{"lineNumber":353,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, failedConfigs, String.format(LOG_ERROR_CLONING, failedRepoLocation));"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":356,"author":{"gitId":"-"},"content":""},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfig} that failed analysis into the list of errors in the summary report and"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * removes {@code failedConfig} from the list of {@code configs}."},{"lineNumber":360,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    private static void handleAnalysisFailed(List\u003cRepoConfiguration\u003e configs, RepoConfiguration failedConfig,"},{"lineNumber":362,"author":{"gitId":"-"},"content":"            String errorMessage) {"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        handleFailedConfigs(configs, Collections.singletonList(failedConfig), errorMessage);"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":367,"author":{"gitId":"-"},"content":"     * Adds {@code failedConfigs} that failed cloning/analysis into the list of errors in the summary report and"},{"lineNumber":368,"author":{"gitId":"-"},"content":"     * removes {@code failedConfigs} from the list of {@code configs}."},{"lineNumber":369,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":370,"author":{"gitId":"-"},"content":"    private static void handleFailedConfigs("},{"lineNumber":371,"author":{"gitId":"-"},"content":"            List\u003cRepoConfiguration\u003e configs, List\u003cRepoConfiguration\u003e failedConfigs, String errorMessage) {"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        Iterator\u003cRepoConfiguration\u003e itr \u003d configs.iterator();"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        while (itr.hasNext()) {"},{"lineNumber":374,"author":{"gitId":"-"},"content":"            RepoConfiguration config \u003d itr.next();"},{"lineNumber":375,"author":{"gitId":"-"},"content":"            if (failedConfigs.contains(config)) {"},{"lineNumber":376,"author":{"gitId":"-"},"content":"                ErrorSummary.getInstance().addErrorMessage(config.getDisplayName(), errorMessage);"},{"lineNumber":377,"author":{"gitId":"-"},"content":"                itr.remove();"},{"lineNumber":378,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":380,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":383,"author":{"gitId":"-"},"content":"     * Generates a report at the {@code repoReportDirectory}."},{"lineNumber":384,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this empty report."},{"lineNumber":385,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e generateEmptyRepoReport(String repoReportDirectory, String displayName) {"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson(displayName);"},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":391,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":393,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":396,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":399,"author":{"gitId":"-"},"content":"     * Generates a report for a single repository at {@code repoReportDirectory}."},{"lineNumber":400,"author":{"gitId":"-"},"content":"     * @return A list of paths to the JSON report files generated for this report."},{"lineNumber":401,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":402,"author":{"gitId":"-"},"content":"    private static List\u003cPath\u003e generateIndividualRepoReport("},{"lineNumber":403,"author":{"gitId":"-"},"content":"            String repoReportDirectory, CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"        List\u003cPath\u003e generatedFiles \u003d new ArrayList\u003c\u003e();"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory))"},{"lineNumber":408,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":409,"author":{"gitId":"-"},"content":"        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory))"},{"lineNumber":410,"author":{"gitId":"-"},"content":"                .ifPresent(generatedFiles::add);"},{"lineNumber":411,"author":{"gitId":"-"},"content":"        return generatedFiles;"},{"lineNumber":412,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"    private static String getSummaryResultPath(String targetFileLocation) {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        return targetFileLocation + \"/\" + SummaryJson.SUMMARY_JSON_FILE_NAME;"},{"lineNumber":416,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"    private static String getIndividualAuthorshipPath(String repoReportDirectory) {"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/authorship.json\";"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"    private static String getIndividualCommitsPath(String repoReportDirectory) {"},{"lineNumber":423,"author":{"gitId":"-"},"content":"        return repoReportDirectory + \"/commits.json\";"},{"lineNumber":424,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"    public static void setEarliestSinceDate(Date newEarliestSinceDate) {"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        if (earliestSinceDate \u003d\u003d null || newEarliestSinceDate.before(earliestSinceDate)) {"},{"lineNumber":428,"author":{"gitId":"-"},"content":"            earliestSinceDate \u003d newEarliestSinceDate;"},{"lineNumber":429,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":430,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":3,"-":428}},{"path":"src/main/java/reposense/util/TimeUtil.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jamessspanggg"},"content":"import java.time.Instant;"},{"lineNumber":4,"author":{"gitId":"jamessspanggg"},"content":"import java.time.ZoneId;"},{"lineNumber":5,"author":{"gitId":"jamessspanggg"},"content":"import java.time.ZoneOffset;"},{"lineNumber":6,"author":{"gitId":"jamessspanggg"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains time related functionalities."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class TimeUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static Long startTime;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Sets the {@code startTime} to be the current time"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void startTimer() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        startTime \u003d System.nanoTime();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getElapsedTime() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        long endTime \u003d System.nanoTime();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        double elapsedTime \u003d (double) (endTime - startTime) / 1_000_000_000.0;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        int elapsedHours \u003d (int) elapsedTime / 3600;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        int elapsedMinutes \u003d (int) (elapsedTime % 3600) / 60;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        double elapsedSeconds \u003d elapsedTime % 60;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String formattedElapsedTime \u003d \"\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (elapsedHours \u003e 0) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d hour(s)\", elapsedHours);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (elapsedMinutes \u003e 0) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            formattedElapsedTime +\u003d String.format(\" %d minute(s)\", elapsedMinutes);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        formattedElapsedTime +\u003d String.format(\" %.2f second(s)\", elapsedSeconds);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return formattedElapsedTime;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the formatted elapsed time from {@code startTime} until current time,"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * with an additional explanatory string."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getElapsedTimeMessage() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return \"Elapsed processing time:\" + getElapsedTime();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":52,"author":{"gitId":"jamessspanggg"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"jamessspanggg"},"content":"     * Get the raw offset in milliseconds for the {@code zoneId} timezone compared to UTC."},{"lineNumber":54,"author":{"gitId":"jamessspanggg"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"jamessspanggg"},"content":"    public static int getZoneRawOffset(ZoneId zoneId) {"},{"lineNumber":56,"author":{"gitId":"jamessspanggg"},"content":"        Instant now \u003d Instant.now();"},{"lineNumber":57,"author":{"gitId":"jamessspanggg"},"content":"        ZoneOffset zoneOffset \u003d zoneId.getRules().getOffset(now);"},{"lineNumber":58,"author":{"gitId":"jamessspanggg"},"content":"        return zoneOffset.getTotalSeconds() * 1000;"},{"lineNumber":59,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":61,"author":{"gitId":"jamessspanggg"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"jamessspanggg"},"content":"     * Get the {@code current} date that is in the system\u0027s timezone into the {@code zoneId} timezone."},{"lineNumber":63,"author":{"gitId":"jamessspanggg"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jamessspanggg"},"content":"    public static Date getZonedDateFromSystemDate(Date current, ZoneId zoneId) {"},{"lineNumber":65,"author":{"gitId":"jamessspanggg"},"content":"        int zoneRawOffset \u003d getZoneRawOffset(zoneId);"},{"lineNumber":66,"author":{"gitId":"jamessspanggg"},"content":"        int systemRawOffset \u003d getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":67,"author":{"gitId":"jamessspanggg"},"content":"        return new Date(current.getTime() + zoneRawOffset - systemRawOffset);"},{"lineNumber":68,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":23,"-":46}},{"path":"src/systemtest/java/reposense/ConfigSystemTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.AuthorConfiguration;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.GroupConfiguration;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.ReportConfiguration;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.parser.ArgsParser;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.parser.AuthorConfigCsvParser;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.parser.GroupConfigCsvParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.parser.RepoConfigCsvParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.parser.ReportConfigJsonParser;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.parser.SinceDateArgumentType;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.report.ErrorSummary;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.report.ReportGenerator;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class ConfigSystemTest {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String FT_TEMP_DIR \u003d \"ft_temp\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String DUMMY_ASSETS_DIR \u003d \"dummy\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final String EXPECTED_FOLDER \u003d \"expected\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATED_TIME \u003d \"Tue Jul 24 17:45:15 SGT 2018\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String TEST_REPORT_GENERATION_TIME \u003d \"15 second(s)\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String TEST_TIME_ZONE \u003d \"Asia/Singapore\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ErrorSummary.getInstance().clearErrorList();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FT_TEMP_DIR);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRange() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        generateReport(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"), false, false);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), \"sinceBeginningDateRange/expected\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDate() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        generateReport(getInputWithUntilDate(\"1/11/2017\"), false, false);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), \"30daysFromUntilDate/expected\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"jamessspanggg"},"content":"     * System test with a specified since date and until date, with the last modified date time in each"},{"lineNumber":79,"author":{"gitId":"jamessspanggg"},"content":"     * line of code."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"jamessspanggg"},"content":"    public void testDateRangeWithModifiedDateTimeInLines() throws Exception {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        generateReport(getInputWithDates(\"1/9/2017\", \"30/10/2017\"),"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                true, false);"},{"lineNumber":85,"author":{"gitId":"jamessspanggg"},"content":"        Path actualFiles \u003d loadResource(getClass(), \"dateRangeWithModifiedDateTimeInLines/expected\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * System test with a specified until date and a {@link SinceDateArgumentType#FIRST_COMMIT_DATE_SHORTHAND}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * since date to capture from the first commit, using shallow cloning."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void testSinceBeginningDateRangeWithShallowCloning() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        generateReport(getInputWithDates(SinceDateArgumentType.FIRST_COMMIT_DATE_SHORTHAND, \"2/3/2019\"),"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                false, true);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), \"sinceBeginningDateRange/expected\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void test30DaysFromUntilDateWithShallowCloning() throws Exception {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        generateReport(getInputWithUntilDate(\"1/11/2017\"), false, true);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Path actualFiles \u003d loadResource(getClass(), \"30daysFromUntilDate/expected\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        verifyAllJson(actualFiles, FT_TEMP_DIR);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private String getInputWithUntilDate(String untilDate) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return String.format(\"--until %s\", untilDate);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private String getInputWithDates(String sinceDate, String untilDate) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return String.format(\"--since %s --until %s\", sinceDate, untilDate);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Generates the testing report to be compared with expected report."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    private void generateReport(String inputDates, boolean shouldIncludeModifiedDateInLines, boolean shallowCloning)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Path configFolder \u003d loadResource(getClass(), \"repo-config.csv\").getParent();"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        InputBuilder inputBuilder \u003d new InputBuilder().addConfig(configFolder)"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .addFormats(formats)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .addTimezone(TEST_TIME_ZONE)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .add(inputDates);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        if (shallowCloning) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            inputBuilder \u003d inputBuilder.addShallowCloning();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String input \u003d inputBuilder.build();"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        List\u003cAuthorConfiguration\u003e authorConfigs \u003d"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        List\u003cGroupConfiguration\u003e groupConfigs \u003d"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                new GroupConfigCsvParser(((ConfigCliArguments) cliArguments).getGroupConfigFilePath()).parse();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        ReportConfiguration reportConfig \u003d new ReportConfigJsonParser().parse(("},{"lineNumber":143,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getReportConfigFilePath());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        RepoConfiguration.merge(repoConfigs, authorConfigs);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        RepoConfiguration.setGroupConfigsToRepos(repoConfigs, groupConfigs);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        RepoConfiguration.setFormatsToRepoConfigs(repoConfigs, cliArguments.getFormats());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        RepoConfiguration.setDatesToRepoConfigs("},{"lineNumber":150,"author":{"gitId":"-"},"content":"                repoConfigs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        RepoConfiguration.setZoneIdToRepoConfigs(repoConfigs, cliArguments.getZoneId().toString());"},{"lineNumber":152,"author":{"gitId":"jamessspanggg"},"content":"        RepoConfiguration.setIsLastModifiedDateIncludedToRepoConfigs(repoConfigs, shouldIncludeModifiedDateInLines);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        ReportGenerator.generateReposReport(repoConfigs, FT_TEMP_DIR, DUMMY_ASSETS_DIR, reportConfig,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATED_TIME, cliArguments.getSinceDate(), cliArguments.getUntilDate(),"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                cliArguments.isSinceDateProvided(), cliArguments.isUntilDateProvided(), () -\u003e"},{"lineNumber":157,"author":{"gitId":"-"},"content":"                TEST_REPORT_GENERATION_TIME, cliArguments.getZoneId());"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Verifies all JSON files in {@code actualDirectory} with {@code expectedDirectory}"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    private void verifyAllJson(Path expectedDirectory, String actualRelative) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            for (Path filePath : pathStream.collect(Collectors.toList())) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"                if (Files.isDirectory(filePath)) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                    verifyAllJson(filePath, actualRelative);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                if (filePath.toString().endsWith(\".json\")) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"                    String relativeDirectory \u003d filePath.toAbsolutePath().toString().split(EXPECTED_FOLDER)[1];"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                    assertJson(filePath, relativeDirectory, actualRelative);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            ioe.printStackTrace();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Asserts the correctness of given JSON file."},{"lineNumber":181,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    private void assertJson(Path expectedJson, String expectedPosition, String actualRelative) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        Path actualJson \u003d Paths.get(actualRelative, expectedPosition);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.exists(actualJson));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            Assert.assertTrue(TestUtil.compareFileContents(expectedJson, actualJson));"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            Assert.fail(e.getMessage());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":5,"-":186}},{"path":"src/test/java/reposense/authorship/FileAnalyzerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.authorship;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.template.GitTestTemplate;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class FileAnalyzerTest extends GitTestTemplate {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Date BLAME_TEST_SINCE_DATE \u003d TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 6);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final Date BLAME_TEST_UNTIL_DATE \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 8);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final Date EMAIL_WITH_ADDITION_TEST_SINCE_DATE \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            TestUtil.getSinceDate(2019, Calendar.MARCH, 28);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Date EMAIL_WITH_ADDITION_TEST_UNTIL_DATE \u003d"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            TestUtil.getUntilDate(2019, Calendar.MARCH, 28);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Date MOVED_FILE_SINCE_DATE \u003d TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 7);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Date MOVED_FILE_UNTIL_DATE \u003d TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 9);"},{"lineNumber":32,"author":{"gitId":"jamessspanggg"},"content":"    private static final Date SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_SINCE_DATE \u003d"},{"lineNumber":33,"author":{"gitId":"jamessspanggg"},"content":"            TestUtil.getSinceDate(2018, Calendar.FEBRUARY, 7);"},{"lineNumber":34,"author":{"gitId":"jamessspanggg"},"content":"    private static final Date LAST_MODIFIED_DATE \u003d new Calendar"},{"lineNumber":35,"author":{"gitId":"jamessspanggg"},"content":"            .Builder()"},{"lineNumber":36,"author":{"gitId":"jamessspanggg"},"content":"            .setDate(2020, 9, 27)"},{"lineNumber":37,"author":{"gitId":"jamessspanggg"},"content":"            .setTimeOfDay(18, 0, 7)"},{"lineNumber":38,"author":{"gitId":"jamessspanggg"},"content":"            .build()"},{"lineNumber":39,"author":{"gitId":"jamessspanggg"},"content":"            .getTime();"},{"lineNumber":40,"author":{"gitId":"jamessspanggg"},"content":"    private static final Date SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_UNTIL_DATE \u003d"},{"lineNumber":41,"author":{"gitId":"jamessspanggg"},"content":"            TestUtil.getUntilDate(2018, Calendar.FEBRUARY, 9);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Date ANALYZE_BINARY_FILES_SINCE_DATE \u003d"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            TestUtil.getSinceDate(2017, Calendar.JANUARY, 1);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Date ANALYZE_BINARY_FILES_UNTIL_DATE \u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            TestUtil.getUntilDate(2020, Calendar.JANUARY, 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final String TIME_ZONE_ID_STRING \u003d \"Asia/Singapore\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        super.before();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID_STRING);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void blameTest() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void movedFileBlameTest() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        config.setSinceDate(MOVED_FILE_SINCE_DATE);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void blameTestDateRange() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), BLAME_TEST_UNTIL_DATE);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void movedFileBlameTestDateRange() throws Exception {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), MOVED_FILE_UNTIL_DATE);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        config.setSinceDate(MOVED_FILE_SINCE_DATE);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        config.setUntilDate(MOVED_FILE_UNTIL_DATE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFileAnalysisCorrectness(fileResult);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameTestFileIgnoreFakeAuthorCommitFullHash_success() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList("},{"lineNumber":102,"author":{"gitId":"-"},"content":"                Collections.singletonList("},{"lineNumber":103,"author":{"gitId":"-"},"content":"                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Assert.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(1).getAuthor());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(2).getAuthor());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(4).getAuthor());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // line added in commit that was ignored"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        Assert.assertEquals(Author.UNKNOWN_AUTHOR, fileInfoFull.getLine(3).getAuthor());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameTestFileIgnoreAllCommit_success() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.convertStringsToCommits("},{"lineNumber":127,"author":{"gitId":"-"},"content":"                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                        MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8))));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoShort);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Assert.assertEquals(fileInfoFull, fileInfoShort);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                Assert.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameTestFileIgnoreRangedCommit_success() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        FileInfo fileInfoRanged \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String rangedCommit \u003d FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING + \"..\""},{"lineNumber":146,"author":{"gitId":"-"},"content":"                + FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.getHashes(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                new CommitHash(rangedCommit)).collect(Collectors.toList()));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoRanged);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Assert.assertEquals(fileInfoFull, fileInfoRanged);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                Assert.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void analyzeFile_blameTestFileIgnoreRangedCommitShort_success() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        config.setSinceDate(BLAME_TEST_SINCE_DATE);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        config.setUntilDate(BLAME_TEST_UNTIL_DATE);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoFull);"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        FileInfo fileInfoRangedShort \u003d generateTestFileInfo(\"blameTest.java\");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        String rangedCommitShort \u003d FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING.substring(0, 8) + \"..\""},{"lineNumber":166,"author":{"gitId":"-"},"content":"                + FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING.substring(0, 8);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        config.setIgnoreCommitList(CommitHash.getHashes(config.getRepoRoot(), config.getBranch(),"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                new CommitHash(rangedCommitShort)).collect(Collectors.toList()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfoRangedShort);"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Assert.assertEquals(fileInfoFull, fileInfoRangedShort);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        fileInfoFull.getLines().forEach(lineInfo -\u003e"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                Assert.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void analyzeFile_emailWithAdditionOperator_success() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        config.setSinceDate(EMAIL_WITH_ADDITION_TEST_SINCE_DATE);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        config.setUntilDate(EMAIL_WITH_ADDITION_TEST_UNTIL_DATE);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        config.setBranch(\"617-FileAnalyzerTest-analyzeFile_emailWithAdditionOperator_success\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MINGYI_AUTHOR_NAME);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), \"pr_617.java\");"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Assert.assertEquals(1, fileInfo.getLines().size());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        fileInfo.getLines().forEach(lineInfo -\u003e Assert.assertEquals(author, lineInfo.getAuthor()));"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":192,"author":{"gitId":"jamessspanggg"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"jamessspanggg"},"content":"    public void analyzeFile_shouldIncludeLastModifiedDateInLines_success() {"},{"lineNumber":194,"author":{"gitId":"jamessspanggg"},"content":"        config.setSinceDate(SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_SINCE_DATE);"},{"lineNumber":195,"author":{"gitId":"jamessspanggg"},"content":"        config.setUntilDate(SHOULD_INCLUDE_LAST_MODIFIED_IN_LINES_UNTIL_DATE);"},{"lineNumber":196,"author":{"gitId":"jamessspanggg"},"content":"        config.setIsLastModifiedDateIncluded(true);"},{"lineNumber":197,"author":{"gitId":"jamessspanggg"},"content":"        config.setBranch(\"1345-FileAnalyzerTest-analyzeFile_shouldIncludeLastModifiedDateInLines_success\");"},{"lineNumber":198,"author":{"gitId":"jamessspanggg"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":199,"author":{"gitId":"jamessspanggg"},"content":"        Author author \u003d new Author(JAMES_AUTHOR_NAME);"},{"lineNumber":200,"author":{"gitId":"jamessspanggg"},"content":"        config.setAuthorList(Collections.singletonList(author));"},{"lineNumber":201,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":202,"author":{"gitId":"jamessspanggg"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(),"},{"lineNumber":203,"author":{"gitId":"jamessspanggg"},"content":"                \"includeLastModifiedDateInLinesTest.java\");"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        FileInfoAnalyzer.analyzeTextFile(config, fileInfo);"},{"lineNumber":205,"author":{"gitId":"jamessspanggg"},"content":""},{"lineNumber":206,"author":{"gitId":"jamessspanggg"},"content":"        Assert.assertEquals(4, fileInfo.getLines().size());"},{"lineNumber":207,"author":{"gitId":"jamessspanggg"},"content":"        fileInfo.getLines().forEach(lineInfo -\u003e"},{"lineNumber":208,"author":{"gitId":"jamessspanggg"},"content":"                Assert.assertEquals(LAST_MODIFIED_DATE, lineInfo.getLastModifiedDate()));"},{"lineNumber":209,"author":{"gitId":"jamessspanggg"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void analyzeBinaryFile_shouldSetLinesToBeEmpty_success() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        config.setSinceDate(ANALYZE_BINARY_FILES_SINCE_DATE);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        config.setUntilDate(ANALYZE_BINARY_FILES_UNTIL_DATE);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        config.setBranch(\"728-FileInfoExtractorTest-getNonBinaryFilesList_directoryWithBinaryFiles_success\");"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d FileInfoExtractor.extractBinaryFileInfos(config);"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        for (FileInfo binaryFileInfo: binaryFileInfos) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            FileInfoAnalyzer.analyzeBinaryFile(config, binaryFileInfo);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            Assert.assertEquals(0, binaryFileInfo.getLines().size());"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    public void analyzeBinaryFile_nonExistingFilePath_success() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        config.setSinceDate(ANALYZE_BINARY_FILES_SINCE_DATE);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        config.setUntilDate(ANALYZE_BINARY_FILES_UNTIL_DATE);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        config.setBranch(\"728-FileInfoExtractorTest-getNonBinaryFilesList_directoryWithBinaryFiles_success\");"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        List\u003cFileInfo\u003e binaryFileInfos \u003d Arrays.asList(new FileInfo(\"/nonExistingJpgPicture.jpg\"),"},{"lineNumber":233,"author":{"gitId":"-"},"content":"                new FileInfo(\"/nonExistingPngPicture.png\"));"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"        for (FileInfo binaryFileInfo: binaryFileInfos) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            Assert.assertNull(FileInfoAnalyzer.analyzeBinaryFile(config, binaryFileInfo));"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":28,"-":211}},{"path":"src/test/java/reposense/parser/ArgsParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.apache.tools.ant.types.Commandline.translateCommandline;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static reposense.util.TestUtil.loadResource;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Calendar;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Date;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import net.sourceforge.argparse4j.helper.HelpScreenException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.RepoSense;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.CliArguments;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.model.ConfigCliArguments;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import reposense.model.FileType;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import reposense.model.LocationsCliArguments;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import reposense.model.ViewCliArguments;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import reposense.util.InputBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import reposense.util.TestUtil;"},{"lineNumber":35,"author":{"gitId":"jamessspanggg"},"content":"import reposense.util.TimeUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class ArgsParserTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final Path PROJECT_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + File.separator + \"config\" + File.separator);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"cli_location_test\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_ABSOLUTE \u003d loadResource(ArgsParserTest.class, \"output\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Path CONFIG_FOLDER_RELATIVE \u003d PROJECT_DIRECTORY.relativize(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final Path OUTPUT_DIRECTORY_RELATIVE \u003d PROJECT_DIRECTORY.relativize(OUTPUT_DIRECTORY_ABSOLUTE);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private static final Path REPO_CONFIG_CSV_FILE \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final Path AUTHOR_CONFIG_CSV_FILE \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            CONFIG_FOLDER_ABSOLUTE.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String NONEXISTENT_DIRECTORY \u003d \"some_non_existent_dir/\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final InputBuilder DEFAULT_INPUT_BUILDER \u003d new InputBuilder();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_REPOSENSE \u003d \"https://github.com/reposense/RepoSense.git\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_CHARLIE \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static final String DEFAULT_TIMEZONE \u003d \"Asia/Singapore\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final ZoneId TIME_ZONE_ID \u003d TestUtil.getZoneId(DEFAULT_TIMEZONE);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void before() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        DEFAULT_INPUT_BUILDER.reset().addConfig(CONFIG_FOLDER_ABSOLUTE);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            FileUtil.deleteDirectory(PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY).toString());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputs_success() throws Exception {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .addFormats(\"java adoc html css js\")"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":90,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":92,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":94,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":102,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test(expected \u003d HelpScreenException.class)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_help_throwsHelpScreenException() throws Exception {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String input \u003d \"--help\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_allCorrectInputsAlias_success() throws Exception {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String input \u003d String.format(\"-c %s -o %s -s 01/07/2017 -u 30/11/2017 -f java adoc html css js -i -v -t %s\","},{"lineNumber":119,"author":{"gitId":"-"},"content":"                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE, DEFAULT_TIMEZONE);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":123,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":125,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":127,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":135,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void parse_withExtraWhitespaces_success() throws Exception {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).addWhiteSpace(5)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE).addWhiteSpace(4)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\").addWhiteSpace(3)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\").addWhiteSpace(6)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                .addFormats(\"java   adoc  html      css js   \")"},{"lineNumber":150,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig().addWhiteSpace(1)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .addView().addWhiteSpace(4)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE).addWhiteSpace(5)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":157,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":159,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":161,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes(Arrays.asList("},{"lineNumber":169,"author":{"gitId":"-"},"content":"                \"java\", \"adoc\", \"html\", \"css\", \"js\"));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(DEFAULT_TIMEZONE), cliArguments.getZoneId());"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void parse_configFolderOnly_success() throws Exception {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":183,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":185,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate(), cliArguments.getZoneId());"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate(), cliArguments.getZoneId());"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        Assert.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE).build();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":197,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":199,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        // Optional arguments have default values"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertDateDiffOneMonth(cliArguments.getSinceDate(), cliArguments.getUntilDate(), cliArguments.getZoneId());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertDateDiffEndOfDay(cliArguments.getUntilDate(), cliArguments.getZoneId());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Assert.assertEquals(FileTypeTest.NO_SPECIFIED_FORMATS, cliArguments.getFormats());"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.systemDefault(), cliArguments.getZoneId());"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    public void parse_viewOnly_success() throws Exception {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView(OUTPUT_DIRECTORY_ABSOLUTE).build();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":215,"author":{"gitId":"-"},"content":"                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void parse_withIgnore_success() throws Exception {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                .addIgnoreStandaloneConfig()"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        String inputWithAlias \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                .add(\"-i\")"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsWithAlias \u003d ArgsParser.parse(translateCommandline(inputWithAlias));"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArgumentsWithAlias instanceof LocationsCliArguments);"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"        Assert.assertTrue(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        Assert.assertTrue(((LocationsCliArguments) cliArgumentsWithAlias).isStandaloneConfigIgnored());"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        Assert.assertEquals(cliArguments, cliArgumentsWithAlias);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public void parse_withoutIgnore_success() throws Exception {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        Assert.assertFalse(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    public void parse_viewOnlyWithoutArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView().build();"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        Assert.assertEquals(CONFIG_DIRECTORY.toString(), ("},{"lineNumber":255,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndOutputDirectory_success() throws Exception {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d OUTPUT_DIRECTORY_RELATIVE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        Path expectedAbsoluteOutputDirectoryPath \u003d OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":265,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_RELATIVE)"},{"lineNumber":266,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":270,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":272,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile(expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":276,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":277,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":281,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":283,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile(expectedAbsoluteOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithouthArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":296,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":298,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":299,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_RELATIVE)"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":308,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":310,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":311,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    public void parse_configFolderAndViewWithArgs_returnsConfigCliArguments() throws Exception {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":317,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":318,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":319,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":323,"author":{"gitId":"-"},"content":"                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"},{"lineNumber":324,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":325,"author":{"gitId":"-"},"content":"                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"},{"lineNumber":326,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    public void sinceDate_correctFormat_success() throws Exception {"},{"lineNumber":331,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":332,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":333,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":334,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":335,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":336,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":338,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    public void untilDate_correctFormat_success() throws Exception {"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":344,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":346,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":349,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    public void sinceDate_withExtraDate_success() throws Exception {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":356,"author":{"gitId":"-"},"content":"                .addSinceDate(\"\\\"01/07/2017 01/07/2018\\\"\")"},{"lineNumber":357,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":358,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":360,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":366,"author":{"gitId":"-"},"content":"    public void untilDate_withExtraTime_success() throws Exception {"},{"lineNumber":367,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":368,"author":{"gitId":"-"},"content":"                .addUntilDate(\"\\\"30/11/2017 10:10:10\\\"\")"},{"lineNumber":369,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":370,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":371,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":372,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":373,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.NOVEMBER, 30);"},{"lineNumber":374,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":375,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":378,"author":{"gitId":"-"},"content":"    public void period_inDaysWithSinceDate_success() throws Exception {"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":380,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":381,"author":{"gitId":"-"},"content":"                .addPeriod(\"2d\")"},{"lineNumber":382,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":383,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":385,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getUntilDate(2017, Calendar.JULY, 2);"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":391,"author":{"gitId":"-"},"content":"    public void period_inWeeksWithUntilDate_success() throws Exception {"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":393,"author":{"gitId":"-"},"content":"                .addUntilDate(\"14/07/2017\")"},{"lineNumber":394,"author":{"gitId":"-"},"content":"                .addTimezone(DEFAULT_TIMEZONE)"},{"lineNumber":395,"author":{"gitId":"-"},"content":"                .addPeriod(\"2w\")"},{"lineNumber":396,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":397,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getSinceDate(2017, Calendar.JULY, 1);"},{"lineNumber":400,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":401,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":404,"author":{"gitId":"-"},"content":"    public void formats_inAlphanumeric_success() throws Exception {"},{"lineNumber":405,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\"java js css 7z\").build();"},{"lineNumber":406,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":408,"author":{"gitId":"-"},"content":"        List\u003cFileType\u003e expectedFormats \u003d FileType.convertFormatStringsToFileTypes("},{"lineNumber":409,"author":{"gitId":"-"},"content":"                Arrays.asList(\"java\", \"js\", \"css\", \"7z\"));"},{"lineNumber":410,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"},{"lineNumber":411,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    public void parse_validGitRepoLocations_repoConfigurationListCorrectSize() throws Exception {"},{"lineNumber":415,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":417,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":418,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":419,"author":{"gitId":"-"},"content":"        Assert.assertEquals(2, repoConfigs.size());"},{"lineNumber":420,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":423,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndView_returnsLocationCliArguments() throws Exception {"},{"lineNumber":424,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":425,"author":{"gitId":"-"},"content":"                .addView()"},{"lineNumber":426,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":427,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":430,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":431,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":432,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":433,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":434,"author":{"gitId":"-"},"content":""},{"lineNumber":435,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":436,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsOnly_success() throws Exception {"},{"lineNumber":437,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA).build();"},{"lineNumber":438,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":439,"author":{"gitId":"-"},"content":""},{"lineNumber":440,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":441,"author":{"gitId":"-"},"content":"        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":442,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":443,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":444,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":447,"author":{"gitId":"-"},"content":"    public void parse_repoLocationsAndViewWithArgs_returnsLocationsCliArguments() throws Exception {"},{"lineNumber":448,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_REPOSENSE, TEST_REPO_DELTA)"},{"lineNumber":449,"author":{"gitId":"-"},"content":"                .addView(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":450,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":451,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":452,"author":{"gitId":"-"},"content":""},{"lineNumber":453,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":454,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"},{"lineNumber":455,"author":{"gitId":"-"},"content":"        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"},{"lineNumber":456,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"},{"lineNumber":457,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":458,"author":{"gitId":"-"},"content":""},{"lineNumber":459,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":460,"author":{"gitId":"-"},"content":"    public void parse_viewWithArgCwd_returnsViewCliArguments() throws Exception {"},{"lineNumber":461,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addView(new File(\".\").toPath()).build();"},{"lineNumber":462,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":463,"author":{"gitId":"-"},"content":""},{"lineNumber":464,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"},{"lineNumber":465,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":466,"author":{"gitId":"-"},"content":""},{"lineNumber":467,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":468,"author":{"gitId":"-"},"content":"    public void parse_configOrLocationsSimilar_success() throws Exception {"},{"lineNumber":469,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE).build();"},{"lineNumber":470,"author":{"gitId":"-"},"content":"        CliArguments configCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":471,"author":{"gitId":"-"},"content":"        Assert.assertTrue(configCliArguments instanceof ConfigCliArguments);"},{"lineNumber":472,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e actualRepoConfigs \u003d"},{"lineNumber":473,"author":{"gitId":"-"},"content":"                RepoSense.getRepoConfigurations((ConfigCliArguments) configCliArguments);"},{"lineNumber":474,"author":{"gitId":"-"},"content":""},{"lineNumber":475,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().addRepos(TEST_REPO_BETA, TEST_REPO_CHARLIE, TEST_REPO_DELTA).build();"},{"lineNumber":476,"author":{"gitId":"-"},"content":"        CliArguments locationCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":477,"author":{"gitId":"-"},"content":"        Assert.assertTrue(locationCliArguments instanceof LocationsCliArguments);"},{"lineNumber":478,"author":{"gitId":"-"},"content":"        List\u003cRepoConfiguration\u003e expectedRepoConfigs \u003d"},{"lineNumber":479,"author":{"gitId":"-"},"content":"                RepoSense.getRepoConfigurations((LocationsCliArguments) locationCliArguments);"},{"lineNumber":480,"author":{"gitId":"-"},"content":""},{"lineNumber":481,"author":{"gitId":"-"},"content":"        Assert.assertEquals(actualRepoConfigs, expectedRepoConfigs);"},{"lineNumber":482,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":483,"author":{"gitId":"-"},"content":""},{"lineNumber":484,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":485,"author":{"gitId":"-"},"content":"    public void emptyArgs_defaultConfigFolderPath() throws Exception {"},{"lineNumber":486,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(new String[]{});"},{"lineNumber":487,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":488,"author":{"gitId":"-"},"content":"        Assert.assertEquals(CONFIG_DIRECTORY.toString(), ("},{"lineNumber":489,"author":{"gitId":"-"},"content":"                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"},{"lineNumber":490,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":493,"author":{"gitId":"-"},"content":"    public void parse_repoAliases_sameResult() throws Exception {"},{"lineNumber":494,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(TEST_REPO_BETA).build();"},{"lineNumber":495,"author":{"gitId":"-"},"content":"        CliArguments repoAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":496,"author":{"gitId":"-"},"content":""},{"lineNumber":497,"author":{"gitId":"-"},"content":"        input \u003d new InputBuilder().add(String.format(\"--repos %s\", TEST_REPO_BETA)).build();"},{"lineNumber":498,"author":{"gitId":"-"},"content":"        CliArguments reposAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"        Assert.assertEquals(repoAliasCliArguments, reposAliasCliArguments);"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":502,"author":{"gitId":"-"},"content":""},{"lineNumber":503,"author":{"gitId":"-"},"content":"    @Test (expected \u003d ParseException.class)"},{"lineNumber":504,"author":{"gitId":"-"},"content":"    public void parse_noValidRepoLocation_throwsParseException()"},{"lineNumber":505,"author":{"gitId":"-"},"content":"            throws ParseException, HelpScreenException {"},{"lineNumber":506,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addRepos(\"https://githubaaaa.com/asdasdasdasd/RepoSense\").build();"},{"lineNumber":507,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":508,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"},{"lineNumber":509,"author":{"gitId":"-"},"content":"        RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"},{"lineNumber":510,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":511,"author":{"gitId":"-"},"content":""},{"lineNumber":512,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":513,"author":{"gitId":"-"},"content":"    public void absoluteConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws Exception {"},{"lineNumber":514,"author":{"gitId":"-"},"content":"        Path absDirectory \u003d PROJECT_DIRECTORY.getParent().toAbsolutePath();"},{"lineNumber":515,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absDirectory).build();"},{"lineNumber":516,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":517,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":520,"author":{"gitId":"-"},"content":"    public void relativeConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws Exception {"},{"lineNumber":521,"author":{"gitId":"-"},"content":"        Path relDirectory \u003d PROJECT_DIRECTORY.getParent();"},{"lineNumber":522,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(relDirectory).build();"},{"lineNumber":523,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":524,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":527,"author":{"gitId":"-"},"content":"    public void parse_notExistsConfigFolder_throwsParseException() throws Exception {"},{"lineNumber":528,"author":{"gitId":"-"},"content":"        Path absConfigFolder \u003d PROJECT_DIRECTORY.resolve(\"non_existing_random_folder\");"},{"lineNumber":529,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(absConfigFolder).build();"},{"lineNumber":530,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":531,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":532,"author":{"gitId":"-"},"content":""},{"lineNumber":533,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":534,"author":{"gitId":"-"},"content":"    public void parse_configCsvFileAsConfigFolder_throwsParseException() throws Exception {"},{"lineNumber":535,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(REPO_CONFIG_CSV_FILE).build();"},{"lineNumber":536,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":537,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":538,"author":{"gitId":"-"},"content":""},{"lineNumber":539,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":540,"author":{"gitId":"-"},"content":"    public void parse_missingConfigValue_throwsParseException() throws Exception {"},{"lineNumber":541,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(new File(\"\").toPath()).build();"},{"lineNumber":542,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":543,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":546,"author":{"gitId":"-"},"content":"    public void outputPath_nonExistentDirectory_success() throws Exception {"},{"lineNumber":547,"author":{"gitId":"-"},"content":"        Path nonExistentDirectory \u003d PROJECT_DIRECTORY.resolve(NONEXISTENT_DIRECTORY);"},{"lineNumber":548,"author":{"gitId":"-"},"content":"        Path expectedRelativeOutputDirectoryPath \u003d nonExistentDirectory.resolve(ArgsParser.DEFAULT_REPORT_NAME);"},{"lineNumber":549,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addOutput(nonExistentDirectory).build();"},{"lineNumber":550,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":551,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":552,"author":{"gitId":"-"},"content":"        Assert.assertTrue(Files.isSameFile("},{"lineNumber":553,"author":{"gitId":"-"},"content":"                expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"},{"lineNumber":554,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":555,"author":{"gitId":"-"},"content":""},{"lineNumber":556,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":557,"author":{"gitId":"-"},"content":"    public void sinceDate_unsupportedFormats_throwsParseException() throws Exception {"},{"lineNumber":558,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01 July 17\").build();"},{"lineNumber":559,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":560,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":561,"author":{"gitId":"-"},"content":""},{"lineNumber":562,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":563,"author":{"gitId":"-"},"content":"    public void untilDate_unsupportedFormats_throwsParseException() throws Exception {"},{"lineNumber":564,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addUntilDate(\"11/31/2017\").build();"},{"lineNumber":565,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":566,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":567,"author":{"gitId":"-"},"content":""},{"lineNumber":568,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":569,"author":{"gitId":"-"},"content":"    public void sinceDate_laterThanUntilDate_throwsParseException() throws Exception {"},{"lineNumber":570,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addSinceDate(\"01/12/2017\")"},{"lineNumber":571,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":572,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":573,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":574,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":575,"author":{"gitId":"-"},"content":""},{"lineNumber":576,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":577,"author":{"gitId":"-"},"content":"    public void period_withBothSinceDateAndUntilDate_throwsParseException() throws Exception {"},{"lineNumber":578,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"18d\")"},{"lineNumber":579,"author":{"gitId":"-"},"content":"                .addSinceDate(\"30/11/2017\")"},{"lineNumber":580,"author":{"gitId":"-"},"content":"                .addUntilDate(\"01/12/2017\")"},{"lineNumber":581,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":582,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":583,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":584,"author":{"gitId":"-"},"content":""},{"lineNumber":585,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":586,"author":{"gitId":"-"},"content":"    public void period_notNumeric_throwsParseExcpetion() throws Exception {"},{"lineNumber":587,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"abcd\").build();"},{"lineNumber":588,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":589,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":590,"author":{"gitId":"-"},"content":""},{"lineNumber":591,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":592,"author":{"gitId":"-"},"content":"    public void period_isZero_throwsParseExcpetion() throws Exception {"},{"lineNumber":593,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addPeriod(\"0w\").build();"},{"lineNumber":594,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":595,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":596,"author":{"gitId":"-"},"content":""},{"lineNumber":597,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":598,"author":{"gitId":"-"},"content":"    public void formats_notInAlphanumeric_throwsParseException() throws Exception {"},{"lineNumber":599,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addFormats(\".java\").build();"},{"lineNumber":600,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":601,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":602,"author":{"gitId":"-"},"content":""},{"lineNumber":603,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":604,"author":{"gitId":"-"},"content":"    public void parse_mutuallyExclusiveArgumentsConfigAndReposTogether_throwsParseException() throws Exception {"},{"lineNumber":605,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":606,"author":{"gitId":"-"},"content":"                .addRepos(TEST_REPO_REPOSENSE)"},{"lineNumber":607,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":608,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":609,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":610,"author":{"gitId":"-"},"content":""},{"lineNumber":611,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":612,"author":{"gitId":"-"},"content":"    public void parse_extraArgumentForIgnore_throwsParseException() throws Exception {"},{"lineNumber":613,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addIgnoreStandaloneConfig().add(\"true\").build();"},{"lineNumber":614,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":615,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":616,"author":{"gitId":"-"},"content":""},{"lineNumber":617,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":618,"author":{"gitId":"-"},"content":"    public void parse_withTimezone_success() throws Exception {"},{"lineNumber":619,"author":{"gitId":"-"},"content":"        String zoneId \u003d \"UTC+11\";"},{"lineNumber":620,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":621,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":622,"author":{"gitId":"-"},"content":""},{"lineNumber":623,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":624,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":625,"author":{"gitId":"-"},"content":""},{"lineNumber":626,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC-1030\";"},{"lineNumber":627,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":628,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":629,"author":{"gitId":"-"},"content":""},{"lineNumber":630,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":631,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":632,"author":{"gitId":"-"},"content":""},{"lineNumber":633,"author":{"gitId":"-"},"content":"        zoneId \u003d \"UTC\";"},{"lineNumber":634,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER.addTimezone(zoneId).build();"},{"lineNumber":635,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":636,"author":{"gitId":"-"},"content":""},{"lineNumber":637,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":638,"author":{"gitId":"-"},"content":"        Assert.assertEquals(ZoneId.of(zoneId), cliArguments.getZoneId());"},{"lineNumber":639,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":640,"author":{"gitId":"-"},"content":""},{"lineNumber":641,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":642,"author":{"gitId":"-"},"content":"    public void parse_incorrectTimezone_throwsParseException() throws Exception {"},{"lineNumber":643,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"UTC+\").build();"},{"lineNumber":644,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":645,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":646,"author":{"gitId":"-"},"content":""},{"lineNumber":647,"author":{"gitId":"-"},"content":"    @Test(expected \u003d ParseException.class)"},{"lineNumber":648,"author":{"gitId":"-"},"content":"    public void parse_timezoneWithoutArgument_throwsParseException() throws Exception {"},{"lineNumber":649,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER.addTimezone(\"\").build();"},{"lineNumber":650,"author":{"gitId":"-"},"content":"        ArgsParser.parse(translateCommandline(input));"},{"lineNumber":651,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":652,"author":{"gitId":"-"},"content":""},{"lineNumber":653,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":654,"author":{"gitId":"-"},"content":"    public void parse_withDatesAndTimezone_success() throws Exception {"},{"lineNumber":655,"author":{"gitId":"-"},"content":"        String input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":656,"author":{"gitId":"-"},"content":"                .addTimezone(\"UTC+11\")"},{"lineNumber":657,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":658,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":659,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":660,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":661,"author":{"gitId":"-"},"content":"        int[] expectedSinceTime \u003d {21, 0, 0};"},{"lineNumber":662,"author":{"gitId":"-"},"content":"        Date expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JUNE, 30, expectedSinceTime);"},{"lineNumber":663,"author":{"gitId":"-"},"content":"        int[] expectedUntilTime \u003d {20, 59, 59};"},{"lineNumber":664,"author":{"gitId":"-"},"content":"        Date expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.NOVEMBER, 30, expectedUntilTime);"},{"lineNumber":665,"author":{"gitId":"-"},"content":""},{"lineNumber":666,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":667,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":668,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":669,"author":{"gitId":"-"},"content":""},{"lineNumber":670,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":671,"author":{"gitId":"-"},"content":"                .addTimezone(\"UTC-0930\")"},{"lineNumber":672,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":673,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":674,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":675,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":676,"author":{"gitId":"-"},"content":"        expectedSinceTime \u003d new int[]{17, 30, 0};"},{"lineNumber":677,"author":{"gitId":"-"},"content":"        expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JULY, 1, expectedSinceTime);"},{"lineNumber":678,"author":{"gitId":"-"},"content":"        expectedUntilTime \u003d new int[]{17, 29, 59};"},{"lineNumber":679,"author":{"gitId":"-"},"content":"        expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.DECEMBER, 1, expectedUntilTime);"},{"lineNumber":680,"author":{"gitId":"-"},"content":""},{"lineNumber":681,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":682,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":683,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":684,"author":{"gitId":"-"},"content":""},{"lineNumber":685,"author":{"gitId":"-"},"content":"        input \u003d DEFAULT_INPUT_BUILDER"},{"lineNumber":686,"author":{"gitId":"-"},"content":"                .addTimezone(\"UTC\")"},{"lineNumber":687,"author":{"gitId":"-"},"content":"                .addSinceDate(\"01/07/2017\")"},{"lineNumber":688,"author":{"gitId":"-"},"content":"                .addUntilDate(\"30/11/2017\")"},{"lineNumber":689,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":690,"author":{"gitId":"-"},"content":"        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":691,"author":{"gitId":"-"},"content":"        expectedSinceTime \u003d new int[]{8, 0, 0};"},{"lineNumber":692,"author":{"gitId":"-"},"content":"        expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JULY, 1, expectedSinceTime);"},{"lineNumber":693,"author":{"gitId":"-"},"content":"        expectedUntilTime \u003d new int[]{7, 59, 59};"},{"lineNumber":694,"author":{"gitId":"-"},"content":"        expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.DECEMBER, 1, expectedUntilTime);"},{"lineNumber":695,"author":{"gitId":"-"},"content":""},{"lineNumber":696,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":697,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate());"},{"lineNumber":698,"author":{"gitId":"-"},"content":"        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate());"},{"lineNumber":699,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":700,"author":{"gitId":"-"},"content":""},{"lineNumber":701,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":702,"author":{"gitId":"-"},"content":"    public void parse_shallowCloning_success() throws Exception {"},{"lineNumber":703,"author":{"gitId":"-"},"content":"        String input \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":704,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":705,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":706,"author":{"gitId":"-"},"content":"        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"},{"lineNumber":707,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"},{"lineNumber":708,"author":{"gitId":"-"},"content":"        Assert.assertEquals(false, cliArguments.isShallowCloningPerformed());"},{"lineNumber":709,"author":{"gitId":"-"},"content":""},{"lineNumber":710,"author":{"gitId":"-"},"content":"        String inputShallow \u003d new InputBuilder().addConfig(CONFIG_FOLDER_ABSOLUTE)"},{"lineNumber":711,"author":{"gitId":"-"},"content":"                .addOutput(OUTPUT_DIRECTORY_ABSOLUTE)"},{"lineNumber":712,"author":{"gitId":"-"},"content":"                .addShallowCloning()"},{"lineNumber":713,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":714,"author":{"gitId":"-"},"content":"        CliArguments cliArgumentsShallow \u003d ArgsParser.parse(translateCommandline(inputShallow));"},{"lineNumber":715,"author":{"gitId":"-"},"content":"        Assert.assertTrue(cliArgumentsShallow instanceof ConfigCliArguments);"},{"lineNumber":716,"author":{"gitId":"-"},"content":"        Assert.assertEquals(true, cliArgumentsShallow.isShallowCloningPerformed());"},{"lineNumber":717,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":718,"author":{"gitId":"-"},"content":""},{"lineNumber":719,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":720,"author":{"gitId":"-"},"content":"     * Ensures that {@code actualSinceDate} is exactly one month before {@code untilDate}."},{"lineNumber":721,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualSinceDate} is not one month before {@code untilDate}."},{"lineNumber":722,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":723,"author":{"gitId":"-"},"content":"    private void assertDateDiffOneMonth(Date actualSinceDate, Date untilDate, ZoneId zoneId) {"},{"lineNumber":724,"author":{"gitId":"jamessspanggg"},"content":"        int zoneRawOffset \u003d TimeUtil.getZoneRawOffset(zoneId);"},{"lineNumber":725,"author":{"gitId":"jamessspanggg"},"content":"        int systemRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":726,"author":{"gitId":"-"},"content":""},{"lineNumber":727,"author":{"gitId":"-"},"content":"        Calendar cal \u003d new Calendar"},{"lineNumber":728,"author":{"gitId":"-"},"content":"                .Builder()"},{"lineNumber":729,"author":{"gitId":"-"},"content":"                .setInstant(untilDate.getTime())"},{"lineNumber":730,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":731,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, 0);"},{"lineNumber":732,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, 0);"},{"lineNumber":733,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, 0);"},{"lineNumber":734,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":735,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, systemRawOffset - zoneRawOffset);"},{"lineNumber":736,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MONTH, -1);"},{"lineNumber":737,"author":{"gitId":"-"},"content":"        Assert.assertTrue(actualSinceDate.equals(cal.getTime()));"},{"lineNumber":738,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":739,"author":{"gitId":"-"},"content":""},{"lineNumber":740,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":741,"author":{"gitId":"-"},"content":"     * Ensures that {@code actualUntilDate} falls on the date of report generation with time at 23:59:59 for the given"},{"lineNumber":742,"author":{"gitId":"-"},"content":"     * {@code zoneId} time zone."},{"lineNumber":743,"author":{"gitId":"-"},"content":"     * @throws AssertionError if {@code actualUntilDate} does not fall on the date of report generation"},{"lineNumber":744,"author":{"gitId":"-"},"content":"     * with time at 23:59:59."},{"lineNumber":745,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":746,"author":{"gitId":"-"},"content":"    private void assertDateDiffEndOfDay(Date actualUntilDate, ZoneId zoneId) {"},{"lineNumber":747,"author":{"gitId":"jamessspanggg"},"content":"        int zoneRawOffset \u003d TimeUtil.getZoneRawOffset(zoneId);"},{"lineNumber":748,"author":{"gitId":"jamessspanggg"},"content":"        int systemRawOffset \u003d TimeUtil.getZoneRawOffset(ZoneId.systemDefault());"},{"lineNumber":749,"author":{"gitId":"-"},"content":""},{"lineNumber":750,"author":{"gitId":"-"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":751,"author":{"gitId":"-"},"content":"        cal.set(Calendar.HOUR_OF_DAY, 23);"},{"lineNumber":752,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MINUTE, 59);"},{"lineNumber":753,"author":{"gitId":"-"},"content":"        cal.set(Calendar.SECOND, 59);"},{"lineNumber":754,"author":{"gitId":"-"},"content":"        cal.set(Calendar.MILLISECOND, 0);"},{"lineNumber":755,"author":{"gitId":"-"},"content":"        cal.add(Calendar.MILLISECOND, systemRawOffset - zoneRawOffset);"},{"lineNumber":756,"author":{"gitId":"-"},"content":"        Assert.assertTrue(actualUntilDate.equals(cal.getTime()));"},{"lineNumber":757,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":758,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":5,"-":753}},{"path":"src/test/java/reposense/template/GitTestTemplate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package reposense.template;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.After;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.Assert;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.Before;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoAnalyzer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import reposense.authorship.FileInfoExtractor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileInfo;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import reposense.authorship.model.FileResult;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import reposense.authorship.model.LineInfo;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import reposense.git.GitCheckout;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import reposense.git.GitClone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import reposense.model.Author;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import reposense.model.CommitHash;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import reposense.model.FileTypeTest;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import reposense.model.RepoConfiguration;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import reposense.model.RepoLocation;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import reposense.util.FileUtil;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains templates for git testing."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class GitTestTemplate {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    protected static final String DISK_REPO_DISPLAY_NAME \u003d \"testrepo-Alpha_master\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    protected static final String ROOT_COMMIT_HASH \u003d \"fd425072e12004b71d733a58d819d845509f8db3\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    protected static final String TEST_COMMIT_HASH_PARENT \u003d \"c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected static final String MINGYI_AUTHOR_NAME \u003d \"myteo\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected static final String JAMES_AUTHOR_NAME \u003d \"jamessspanggg\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected static final String JAMES_ALTERNATIVE_AUTHOR_NAME \u003d \"James Pang\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected static final String JINYAO_AUTHOR_NAME \u003d \"jylee-git\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH \u003d \"136c6713fc00cfe79a1598e8ce83c6ef3b878660\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected static final String LATEST_COMMIT_HASH_PARENT \u003d \"b28dfac5bd449825c1a372e58485833b35fdbd50\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected static final String EMPTY_TREE_HASH \u003d \"4b825dc642cb6eb9a060e54bf8d69288fbee4904\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING \u003d"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \"7d7584fc204922cc5ff3bd5ca073cad6bed2c46a\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING \u003d"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING \u003d"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \"8e4ca1da5d413e9ab84a1e8d1474918afa97f7a1\";"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    protected static final String FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING \u003d"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    protected static final List\u003cCommitHash\u003e FAKE_AUTHOR_BLAME_RANGED_COMMIT_LIST_09022018 \u003d Arrays.asList("},{"lineNumber":70,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_ONE_06022018_STRING),"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_TWO_06022018_STRING),"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_THREE_07022018_STRING),"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            new CommitHash(FAKE_AUTHOR_BLAME_RANGED_COMMIT_FOUR_08022018_STRING));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    protected static final String TIME_ZONE_ID_STRING \u003d \"Asia/Singapore\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    protected static RepoConfiguration config;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Before"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void before() throws Exception {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        config.setFormats(FileTypeTest.DEFAULT_TEST_FORMATS);"},{"lineNumber":85,"author":{"gitId":"jamessspanggg"},"content":"        config.setIsLastModifiedDateIncluded(false);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @BeforeClass"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static void beforeClass() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        deleteRepos();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        config.setZoneId(TIME_ZONE_ID_STRING);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        GitClone.clone(config);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @AfterClass"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void afterClass() throws IOException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        deleteRepos();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @After"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void after() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        GitCheckout.checkout(config.getRepoRoot(), \"master\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private static void deleteRepos() throws IOException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Generates the information for test file."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public FileInfo generateTestFileInfo(String relativePath) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), relativePath);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        config.getAuthorDetailsToAuthorMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return fileInfo;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public FileResult getFileResult(String relativePath) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        FileInfo fileinfo \u003d generateTestFileInfo(relativePath);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return FileInfoAnalyzer.analyzeTextFile(config, fileinfo);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Asserts the correctness of file analysis with regards to the contribution"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * made by author named in {@code FAKE_AUTHOR_NAME}."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void assertFileAnalysisCorrectness(FileResult fileResult) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        for (LineInfo line : fileResult.getLines()) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            if (line.getContent().startsWith(\"fake\")) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Assert.assertEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                Assert.assertNotEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Returns a {@code Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * will be filtered out in the `git log` command."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    protected Author getAlphaAllAliasAuthor() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        Author author \u003d new Author(MAIN_AUTHOR_NAME);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return author;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jamessspanggg":1,"-":149}}]
